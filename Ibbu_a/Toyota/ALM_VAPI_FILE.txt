' Selenium Script [VBScript]
' Created by Jim Sears
' 04/15/2017 10:25:27 AM
' ====================================================


' ----------------------------------------------------
' Main Test Function
' Debug - Boolean. Equals to false if running in [Test Mode] : reporting to Quality Center
' CurrentTestSet - [OTA COM Library].TestSet.
' CurrentTSTest - [OTA COM Library].TSTest.
' CurrentRun - [OTA COM Library].Run.
' ----------------------------------------------------
Sub Test_Main(Debug, CurrentTestSet, CurrentTSTest, CurrentRun)
  ' *** VBScript Limitation ! ***
  ' "On Error Resume Next" statement suppresses run-time script errors.
  ' To handle run-time error in a right way, you need to put "If Err.Number <> 0 Then"
  ' after each line of code that can cause such a run-time error.
  On Error Resume Next

  ' clear output window
  TDOutput.Clear
  ' ----------------------------------------------------

  ' ----------------------------------------------------
  'Get System Temp directory
  Set objShell = CreateObject("WScript.Shell")
  strTempDir = objShell.ExpandEnvironmentStrings("%temp%")
  Set objShell = Nothing
  ' ----------------------------------------------------

  ' ----------------------------------------------------
  'Get Java exe and set execution values for running ARTS jar file
  Set objShell = CreateObject("WScript.Shell")
  strJava = objShell.ExpandEnvironmentStrings("%JAVA_HOME%")
  If strJava = "" Then
    Set objNet = CreateObject("WScript.Network")
    strCompName = objNet.ComputerName
    TDHelper.AddStepToRun "Java not installed or SystemVariable 'JAVA_HOME' does not exist. Verify Java is installed on " & strCompName, strQCRunID, "", "", "Failed"
    Set objNet = Nothing
    Exit Sub
  End If
  strJava = Chr(34) & objShell.ExpandEnvironmentStrings("%JAVA_HOME%") & "\bin\java.exe" & Chr(34) & " " & Chr(34) & "-jar" & Chr(34)
  Set objShell = Nothing
  ' ----------------------------------------------------

  ' ----------------------------------------------------
  'Fixed files and files location
  strJavaProperties = Chr(34) & "-Dlogback.configurationFile=C:\TAF\ARTS\logback.xml" & Chr(34)
  strArtsJar = Chr(34) & "C:\TAF\ARTS\ARTS.jar" & Chr(34)
  strConfigFile = Chr(34) & "C:\TAF\ARTS\web.config.properties" & Chr(34)
  ' ----------------------------------------------------

  ' ----------------------------------------------------
  If Not Debug Then
    'Get Run details from QC Test Set and QC Test Set Test
    strTestName = Replace(CurrentTSTest.Name,"[1]","")
    strQCRunID = CurrentRun.ID

    'Create Config file in temp directory
    Set objFSO=CreateObject("Scripting.FileSystemObject")
    objFSO.CreateFolder strTempDir & "\" & strTestName & "_" & strQCRunID
    strConfigFile = strTempDir & "\" & strTestName & "_" & strQCRunID & "\" & "config.properties_" & strQCRunID
    Set objFile = objFSO.CreateTextFile(strConfigFile,True)
    'Config properties are set in TestSet comments
    objFile.Write RemoveHTML(CurrentTestSet.Field("CY_COMMENT")) & vbCrLf
    objFile.Close
    Set objFile = Nothing
    ' ----------------------------------------------------

    ' ----------------------------------------------------
    TDOutput.Print "Config Properties file = " & CStr(strConfigFile)
    TDHelper.AddStepToRun "Config file created from QC Test Set Comments", strConfigFile, "", "", "Passed"
  Else
    'Test running from Test Plan for debugging by using fixed values
    strTestName = "CWT_LOGIN_TEST"
    strQCRunID = "123456"
    strConfigFile = Chr(34) & "C:\TAF\ARTS\web.config.properties" & Chr(34)
   TDHelper.AddStepToRun "Config file from local folder", strConfigFile, "", "", "Passed"
  End If

  strCmd = strJava & " " & strJavaProperties & " " & strArtsJar
  strArgs = Chr(34) & strTestName & Chr(34) & " " & strConfigFile & " " & strQCRunID & Chr(34)
  TDHelper.AddStepToRun "Command", strCmd & " " & strArgs, "", "", "Passed"
  ' ----------------------------------------------------

  ' ****************************************************
  'Execute Test with 4 minute max run time (240,000 milliseconds)
  result = XTools.run(strCmd, strArgs, 240000, True)
  ' ****************************************************

  ' ----------------------------------------------------
  'Define Results file path for upload
  strResultsFile = strTempDir & "\" & strTestName & "_" & strQCRunID & "\" & strTestName & "_" & strQCRunID & ".html"
  TDHelper.AddStepToRun "Results file path", "[" & strResultsFile & "]", 0, 0, "Passed"
  TDOutput.Print("Results file path [" & strResultsFile & "]")
  ' ----------------------------------------------------

  ' ----------------------------------------------------
  If Not Debug Then
    'Upload if VAPI Test is run from QC Test Set
    TDHelper.UploadAttachment strResultsFile, CurrentRun
    'Add report to Test Set if run fails
    If result <> 0 Then
      TDHelper.UploadAttachment strResultsFile, CurrentTSTest
      'Msgbox "Test Run has failed. RETURN CODE: " & result
    End If
    TDOutput.Print("Results file path [" & strResultsFile & "]")
  End If
  ' ----------------------------------------------------

  ' ----------------------------------------------------
  strResult = "UNDEFINED"
  Select Case result
    Case 0
       strResult = "Passed"
       TDHelper.AddStepToRun "Return Code", "TAF Selenium return code from ARTS runnable JAVA jar", 0, result, strResult
    Case 258
       strResult = "Not Completed"
       TDHelper.AddStepToRun "Return Code", "TAF Selenium return code from ARTS runnable JAVA jar", 0, result, strResult
    Case Else
       strResult = "Failed"
       TDHelper.AddStepToRun "Return Code", "TAF Selenium return code from ARTS runnable JAVA jar", 0, result, strResult
  End Select
  ' ----------------------------------------------------


  ' ----------------------------------------------------
  If Not Debug Then
    CurrentRun.Status = strResult
    CurrentTSTest.Status = strResult
    'Msgbox "Wait"
  Else
    TDOutput.Print "Test Status <" & strResult & ">"
  End If
  ' Handle run-time errors since the On Error Resume Next is skipping all errors
  If Err.Number <> 0 Then
    TDOutput.Print "VAPI test Run-time error [" & Err.Number & "] : " & Err.Description
  End If
End Sub


Function RemoveHTML( strText )
  On Error Resume Next
    Dim TAGLIST
    TAGLIST = ";!--;!DOCTYPE;A;ACRONYM;ADDRESS;APPLET;AREA;B;BASE;BASEFONT;" &_
              "BGSOUND;BIG;BLOCKQUOTE;BODY;BR;BUTTON;CAPTION;CENTER;CITE;CODE;" &_
              "COL;COLGROUP;COMMENT;DD;DEL;DFN;DIR;DIV;DL;DT;EM;EMBED;FIELDSET;" &_
              "FONT;FORM;FRAME;FRAMESET;HEAD;H1;H2;H3;H4;H5;H6;HR;HTML;I;IFRAME;IMG;" &_
              "INPUT;INS;ISINDEX;KBD;LABEL;LAYER;LAGEND;LI;LINK;LISTING;MAP;MARQUEE;" &_
              "MENU;META;NOBR;NOFRAMES;NOSCRIPT;OBJECT;OL;OPTION;P;PARAM;PLAINTEXT;" &_
              "PRE;Q;S;SAMP;SCRIPT;SELECT;SMALL;SPAN;STRIKE;STRONG;STYLE;SUB;SUP;" &_
              "TABLE;TBODY;TD;TEXTAREA;TFOOT;TH;THEAD;TITLE;TR;TT;U;UL;VAR;WBR;XMP;"

    Const BLOCKTAGLIST = ";APPLET;EMBED;FRAMESET;HEAD;NOFRAMES;NOSCRIPT;OBJECT;SCRIPT;STYLE;"

    Dim nPos1
    Dim nPos2
    Dim nPos3
    Dim strResult
    Dim strTagName
    Dim bRemove
    Dim bSearchForBlock

    nPos1 = InStr(strText, "<")
    Do While nPos1 > 0
        nPos2 = InStr(nPos1 + 1, strText, ">")
        If nPos2 > 0 Then
            strTagName = Mid(strText, nPos1 + 1, nPos2 - nPos1 - 1)
            strTagName = Replace(Replace(strTagName, vbCr, " "), vbLf, " ")

            nPos3 = InStr(strTagName, " ")
            If nPos3 > 0 Then
                strTagName = Left(strTagName, nPos3 - 1)
            End If

            If Left(strTagName, 1) = "/" Then
                strTagName = Mid(strTagName, 2)
                bSearchForBlock = False
            Else
                bSearchForBlock = True
            End If

            If InStr(1, TAGLIST, ";" & strTagName & ";", vbTextCompare) > 0 Then
                bRemove = True
                If bSearchForBlock Then
                    If InStr(1, BLOCKTAGLIST, ";" & strTagName & ";", vbTextCompare) > 0 Then
                        nPos2 = Len(strText)
                        nPos3 = InStr(nPos1 + 1, strText, "</" & strTagName, vbTextCompare)
                        If nPos3 > 0 Then
                            nPos3 = InStr(nPos3 + 1, strText, ">")
                        End If

                        If nPos3 > 0 Then
                            nPos2 = nPos3
                        End If
                    End If
                End If
            Else
                bRemove = False
            End If

            If bRemove Then
                strResult = strResult & Left(strText, nPos1 - 1)
                strText = Mid(strText, nPos2 + 1)
            Else
                strResult = strResult & Left(strText, nPos1)
                strText = Mid(strText, nPos1 + 1)
            End If
        Else
            strResult = strResult & strText
            strText = ""
        End If

        nPos1 = InStr(strText, "<")
    Loop
    strResult = strResult & strText

    RemoveHTML = strResult
    On Error Goto 0
End Function
