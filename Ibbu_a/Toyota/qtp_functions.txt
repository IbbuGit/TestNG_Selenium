Option Explicit
'Master Function File
'C:\Users\Searsj\Documents\QA COE\Automation\ARTS FRAMEWORK\FUNCTIONS
'Last Modified - 03/30/2017 09:35:00 PM

'==================================================================================================
' Jim Sears
' 
'--------------------------------------------------------------------------------------------------
'FunALMConnected - Returns boolean if QC is connected during test run.
'FunCDF - Processes all parameters looking for CDF values to process with the function FunCarryDataForward
'FunCaptureDesktopImageForTestResults()  
'FunCarryDataForward - Processes a parameter by converting to a value, copying data from another sheet tab or running a query against a database.
'FunCheckForMessageFromWebpage - Membership_Management uses a dialogue window to display messages.
'FunCheckInTest - QC Project has version control then test can be checked in
'FunCheckOutTest - QC Project has version control then test can be checked out
'FunCompare - Standard checkpoint process to compare expected value against actual value and report. 
'FunCompareExitOnFail - Standard checkpoint but will stop test if compare fails.
'FunDateTimeStamp - Return unique serial number comprised of date and time.
'FunEval - Execute UFT line of code such as a CheckPoint.
'FunFailTest - Report script failures to QC and add details to Test Results and QC Test run that are not normally captured.
'FunGetActionName - Without brackets or Test Name that contains the ACTION, get just the ACTION name.
'FunGetActionPath - Retrieves path to ACTION from external data source.
'FunGetActiveWindowText - Use windows DLL to get active window handle and function to get text.
'FunGetAttachmentFromTestObject - Get Attachment from Quality Center Test object such as a test case or folder.
'FunGetBrowserTypeFromTestSetName(strDefaultBrowser) - QC Test Set name has IE or CHROME or FIREFOX then the web test will use that browser to run the tests or use the default.
'FunGetEndTag - Supporting function for CDF.
'FunGetEnvironmentVariable - Returns system variable specified by name. To see list, open CMD and type SET. Example 'Temp' returns folder and path to system temp folder
'FunGetROProperties - Returns a property such as Last Modified date/time for a file.
'FunGetPFKey - Convert input from PF key to nemonic key. Function keys like F1, F2, etc.
'FunGetParmFromTestSetDesc - QC Test Set Description contains execution details like url in the format of URL [http:\\abc.xyz]. Any parameter can be stored and retrieved with this format.
'FunGetQCTetstSetDesc - Gets the QC Test Set for the current running test. (Function is used by FunGetParmFromTestSetDesc
'FunGetQCTestSetName - Get TestSet for currently running test if test is running from QC.
'FunGetUFTCaptureLevel  - Get a UFT Option for Image capture
'FunGetUFTTestAddIn - Get list of UFT Add-ins loaded with current test.
'FunGetResourcePath - Get path to Resource when given the Resource name, parital name is accepted.
'FunGetSheetNbr - Returns index number of data table sheet.
'FunGetSheetNbrByName - Returns the index of a sheet when given the sheet name.
'FunGetTextUsingUFT - Get visible text from web page using descriptive programming.
'FunIsLabPC - Identifies PC the current test is running on is part of the AUTOMATION LAB. Used by FailTest to close all browsers, apps, etc. when test fails.
'FunIsProcessRunning - Is a specific System process running?
'FunIsScriptReadOnly - Returns True if script title contains 'Read Only'
'FunPad - Converts single digit string into two digit string, as in month 2 into 02.
'FunParameterExists - Verify if parameter exists in datatable, returns True/False.
'FunReportDetails - Used to report consistent results.
'FunReuseBrowser(strDefaultBrowser, strURL, strUser, strPassword) - Looks for text file created by previous login and if web page is available and login credentials match, the browser is reused insted of logging in again
'FunSetResourceMonitor - Web browser testing, measures memory usage
'FunTransformSpecialData - Transform special input data <BLANK> to vbNullString or other values so input data can change existing data values.
'SubActionInitialize - Initialize processes at the ACTION level.
'SubAddRecoveryScenario - Dynamically add Recovery Scenario at Run Time to Test.
'SubCheckProperty - Use Native UFT function 'CheckProperty' to dynamically data drive using test data
'SubClick - User registered function to Click web object
'SubCloseALMDefect - Closes defects opened by FunFailTest when test passes.
'SubCloseAllTabs - Web testing, close browser tabs
'SubCreateALMDefect - Create a defect using the Recovery Scenario function for the current running test when it fails
'SubDeleteFile - Delete file from local system.
'SubExecute - Execute list of actions located in datatable.
'SubFieldValidationWeb - Field validation for web when given the object name, comparison operator and expected value. Also can validate Text on screen.
'SubLoadUFTSettings - Loads settings for Test, Object Identification. Used outside of automation execution.
'SubLoadTestData - Load data row(s) from external source using sql query.
'SubLoadTestDescriptionToALM - Updates QC Test description with NOTES text for each DATA_SCENARIO that was executed at run time.
'SubLoadTestDescriptionToALMWithVersionControl - Updates QC Test description with NOTES text for each DATA_SCENARIO that was executed at run time.
'SubLoadTestStepsToALM - Add steps captured during execution to test in QC Test Plan
'SubLoadTestStepsToALMWithVersionControl - Add steps captured during execution to test in QC Test Plan
'SubLoadUFTSettings - Using AOM (Automation Object Model), set UFT settings with this function.
'SubNotifyALMTestPlanner - Sends email to Test Set Test owner located in Quality Center.
'SubOpenBrowser(strURL, strDefaultBrowser, blnResourceMonitor) - Open browser to given URL and browser in QC Test Set name (or default)
'SubRegUserFunc - Register user functions for all actions.
'SubReport - Universal report sub so that report statements are written to test results and QC.
'SubSaveTestDescription - Saves or updates the QC Test description based on the NOTES field of each action's DATA_SCENARIO loaded at run time.
'SubSelectWhenNotNull - Select item from drop down list only if data supplied is not null.
'SubSendKey - Send key strokes to the screen.
'SubSendKeyWhenNotNull - Send key press to application when data supplied is not null.
'SubSendMail - Send email through QualityCenter to user. Adds additional subtext to email body when using this function instead of using the QCUtil.SendMail function directly.
'SubSetWhenNotNull - Set value in Edit box if data supplied is not null.
'SubTestInitialize - Initialize processes at the test level.
'SubUpdateLofFile - Creates log file for debugging purposes
'SubUpdateTestSetTestComments - Update Comments column in the Test Lab test set with the error encountered during run time. Function is called from FunFailTest

'*****************NOTES************************
'Report.Filter Modes
'0 or rfEnableAll: This is the default mode. All reported events are displayed in the Test Results. 
'1 or rfEnableErrorsAndWarnings: Only those events with a warning or fail status are displayed in the Test Results. 
'2 or rfEnableErrorsOnly: Only those events with a fail status are displayed in the Test Results. 
'3 or rfDisableAll: All events in the Test Results are disabled. 

'Report.Report Events
'0 or micPass: Causes the status of this step to be passed and sends the specified message to the Run Results window. 
'1 or micFail: Causes the status of this step to be failed and sends the specified message to the Run Results window. When this step runs, the test or component fails. 
'2 or micDone: Sends a message to the Run Results window without affecting the pass/fail status of the test or component. 
'3 or micWarning: Sends a warning message to the Run Results window, but does not cause the test or component to stop running, and does not affect the pass/fail status of the test or component. 


'*****************FUNCTIONS******************
'**************************************************

'==================================================================================================
'Jim Sears - 08/23/2011
'--------------------------------------------------------------------------------------------------
'@Returns boolean if QC is connected during test run.
Function FunALMConnected()
    On Error Resume Next                  
	    FunALMConnected = QCUtil.IsConnected
    On Error Resume Next
End Function

'==================================================================================================
' Jim Sears - 08/12/2011
'--------------------------------------------------------------------------------------------------
'@Capture desktop bitmap image to temp directory. Used primarily for adding image to report test results
Function FunCaptureDesktopImageForTestResults()    
    Dim strTestName, strScreenShotLocalFilePath
    'Reporter.ReportEvent micDone, "Function FunCaptureDesktopImageForTestResults", "Begin screen capture..."
    On Error Resume Next
    Err.Clear
                
    'Capture desktop image and save to test run results     
    strScreenShotLocalFilePath = Reporter.ReportPath & "\" & FunDateTimeStamp & ".png"
    Desktop.CaptureBitmap strScreenShotLocalFilePath, True
                
    If Err.Number <> 0 Then
        Reporter.ReportEvent micFail, "FunCaptureDesktopImageForTestResults", "Error occured in function while saving desktop image. Error [" & Err.Number & ":" & Err.Description & "]"
        Err.Clear
    End If

    On Error GoTo 0
    
    'Return the path to the file
    FunCaptureDesktopImageForTestResults = strScreenShotLocalFilePath  
    'Reporter.ReportEvent micDone, "Function FunCaptureDesktopImageForTestResults", "End screen capture [" & strScreenShotLocalFilePath & "]"
End Function

'==================================================================================================
' Jim Sears -  01/9/09
' Carry (copy) data from one sheet to another. Parameter names need to be specified because they could be different.
' Populates cell on sheet with data carried forward, does not enter data into gui. Function can also convert a value into to data such as get current date or time.
' Function also can query database and use the value returned from the query as input data into GUI but does not actually enter data into GUI, just updates data table.
'--------------------------------------------------------------------------------------------------
'@Description Copy data from one sheet to the sheet related to the current action. 
'The following values will be inserted into the data sheet so that when the script executes, the data will be carried forward from another tab or database query.
'Usage for 1) multiple values or 2) a fixed value and CD value or for 3) XML or for 4) a CD value and XML 
'5) Create a relative date value based on different values 6) Database query where sheet is populated with value and query result is validated against expected result. Expected result is optional.
                                '1) CDF(Parm;;Sheet) CDF(Parm;;Sheet)   
                                '1) CDF(Parm;;Sheet) CDF(Parm;;Sheet)   
                                '3) CDF(XML;;XML_Tag;;XML_Text_A) 
                                '4) CDF(Parm;;Sheet) CDF(XML;;XML_Tag;;XML_Text_A)
                                '5) CDF(Date_Format;;Date)  Date = {any date, integer, 2-TuesdayNextWeek, MondayNextWeek}
                                '6) CDF(SQL;;select id from dne4_audit.exception) optional CDF(SQL;;myQueryName;;100) where myQueryName is the name in the MYSQL database table.                            
                                '7) CDF(date+;;+7) Add or subtract value to current date
Function FunCarryDataForward(strNewParameter, strNewSheetNbr)
   Dim strCurrentValue, strstartTag, strEndTag, strCDFValue, strProcessType, strCDF, strSQL, strDataValue, strDateRequest
   Dim dtNow, arrParameterSheet, aParameter, aSheet, intSheetNbr, Iteration, intLoopLimit, arrEval
   'Get existing value in data sheet and process if CDF( exists in string, otherwise do nothing and exit function
    strCurrentValue = DataTable(strNewParameter, strNewSheetNbr)
    If InStr(strCurrentValue, "CDF(") = 0 Then
        Exit Function 
    End If
    'Error handling for missing close ')'
    If InStr(strCurrentValue, ")") = 0 Then
        Reporter.ReportEvent micFail, "Function: Carry_Data_Forward Syntax error","Please verifiy the data sheet contains match parenthesis for CDF function." & vbCRLF & vbCRLF & "Data sheet current value" & vbTab & strCurrentValue
    End If
    'Carry data from another sheet tab or from a xml file. Repeat if multiple CDF values exist in string
    Do
        strStartTag = InStrRev(strCurrentValue, "CDF(") + 4
        strEndTag = FunGetEndTag(strCurrentValue, strStartTag)
                                
        strCDFValue = Mid(strCurrentValue, strStartTag, strEndTag - strStartTag)
        strProcessType = Left(strCDFValue, InStr(strCDFValue,";;") - 1)
        strCDF = "CDF(" & strCDFValue & ")"  'Use the original value for the Replace
        Select Case strProcessType
            'Eval can use dictionary object provided the dictionary object is defined in the registry so it is global. Must be done on each PC that is referencing the dictionary. The following vbs code can add the dictionary to the registry.
            'Dim WshShell
            'Set WshShell =CreateObject("WScript.Shell")
            'WshShell.RegWrite "HKCU\Software\Mercury Interactive\QuickTest Professional\MicTest\ReservedObjects\GlobalDictionary\ProgID", "Scripting.Dictionary","REG_SZ"
            'Set WshShell = Nothing                                                
            Case "sql"                                                                
                strSQL = Mid(strCDFValue,InStr(strCDFValue, ";;") + 2, Len(strCDFValue) - InStr(strCDFValue, ";;"))
                'Msgbox strSQL                                                 
                FunConnectArtsDB dbConnection
                FunArtsSql dbConnection, strSQL, objResultSet
                'Error handling for empty result set
                If objResultSet.BOF AND objResultSet.EOF Then
                    Reporter.ReportEvent micFail, "FunCarryDataForward", "Result set is empty for sql: " & strSQL
                    SubUpdateQCRunComments "Result set is empty for sql: " & strSQL
                    strDataValue = vbNullString 'Empty result set                                                                     
                Else
                    objResultSet.MoveFirst
                    strDataValue = objResultSet.Fields.Item(0).Value 
                End If                                    
                'Print result set                                                                 
                'Print "FIELD: "  & objResultSet.Fields.Item(0).Name & vbCRLF & "DATA: " & strDataValue                                                  
                'Clean up
                objResultSet.Close
                Set objResultSet = Nothing                                                         
                'Disconnect and close connection
                FunDisconnectDB dbConnection
                'Replace sql in datatable with value
                strCurrentValue = Replace(strCurrentValue, strCDF, strDataValue)
            Case "date"
                strDateRequest = Mid(strCDFValue,InStr(strCDFValue, ";;") + 2, Len(strCDFValue) - InStr(strCDFValue, ";;"))
                Select Case strDateRequest
                    Case "Now"
                        strDataValue = Now                                                                       
                        Reporter.ReportEvent micDone, "Function: 'FunCarryDataForward'", "Date Format: '" &strProcessType & "'." & vbCR & "Date Request: '" & strDateRequest & "'." & vbCR & vbCR & "New Date: '" & strDataValue &"'."
                        strCurrentValue = Replace(strCurrentValue, strCDF, strDataValue)
                    Case Else
                        Reporter.ReportEvent micFail, "Function CarryDateFoward. Date format not recognized", "Please review data sheet for proper date format or contact automation for assitance. Date Format: '" & strDateRequest & "'." & vbCRLF & "Sheet number: '" & strNewSheetNbr & "'." & vbCRLF & "Parameter: '" & strNewParameter & "'."
                        SubUpdateQCRunComments "Please review data sheet for proper date format or contact automation for assitance. Date Format: '" & strDateRequest & "'. Sheet number: '" & strNewSheetNbr & "'. Parameter: '" & strNewParameter & "'."
                    End Select
            Case "date+"
                strDateRequest = Mid(strCDFValue,InStr(strCDFValue, ";;") + 2, Len(strCDFValue) - InStr(strCDFValue, ";;"))
                'Select Case lcase(Right(strDateRequest, 1))
                '               Case "m"
                strDataValue = DateAdd(lcase(Right(strDateRequest, 1)), Replace(strDateRequest, lcase(Right(strDateRequest, 1)), vbNullString), Date)
                '               Case "d"
                '               Case "y"
                '               Case Else
                'End Select
                'Dim strMonth:strMonth = Left(strDateRequest, InStr(strDateRequest,"m")-1)
                'Dim strDay:strDay = Mid(strDateRequest,InStr(strDateRequest, "m") + 1 , InStr(strDateRequest, "d") - InStr(strDateRequest,"m") - 1)
                'Dim strYear:strYear = Mid(strDateRequest,InStr(strDateRequest, "d") + 1 , InStr(strDateRequest, "y") - InStr(strDateRequest,"d") - 1)
                'Set fixed date for calculations and add each unit of time, year, month, day.
                'dtNow = Now
                'strDay = Day(DateAdd("d", strDay, dtNow))
                'strMonth = Month(DateAdd("m", strMonth, dtNow))
                'strYear = Year(DateAdd("yyyy", strYear, dtNow))
                'strDataValue = FunPad(strMonth) & FunPad(strDay) & FunPad(strYear)

                Reporter.ReportEvent micDone, "Function: 'FunCarryDataForward'", "Date Format: '" &strProcessType & "'." & vbCR & "Date Request: '" & strDateRequest & "'." & vbCR & vbCR & "New Date: '" & strDataValue &"'."
                strCurrentValue = Replace(strCurrentValue, strCDF, strDataValue)                                          
            Case "Eval"
                arrEval = Split(strCDFValue, ";;") 'User supplied dictionary object: CDF(Eval;;GlobalDictionary("PNR")) or CDF(Eval;;FunDateTimeStamp)
                strDataValue = Eval (arrEval(1))                                                 
                strCurrentValue = Replace(strCurrentValue, strCDF, strDataValue)

            Case Else
                arrParameterSheet = Split(strCDFValue, ";;") 'User supplied sheet and parameter where data value resides
                aParameter = arrParameterSheet(0)
                aSheet = arrParameterSheet(1)
                intSheetNbr = FunGetSheetNbrByName(aSheet) 'Change from sheet name to sheet nbr so the FunParameterExists function will work
                If FunParameterExists(intSheetNbr, aParameter) Then
                    strDataValue = DataTable(aParameter,intSheetNbr) 'Get value
                    'Iteration value for remote cell in cases where mulitple values separated by semi-colon exists 123;;xyz - usage CDF(parm;;sheet;;iteration)
                    If uBound(arrParameterSheet) = 2 Then
                        Iteration = arrParameterSheet(2)
                        strDataValue_Array = Split(strDataValue,";;")
                        strDataValue = strDataValue_Array(Iteration-1) 'adjust for zero based array
                    End If
                    strCurrentValue = Replace(strCurrentValue, strCDF, strDataValue) 'Replace CDF() in string with new data value
                    SubReport "micPass", "Function: 'Carry_Data_Forward'", "Value " & strDataValue & vbCRLF & "Sheet: " & aSheet & vbCRLF & "Parameter: " & aParameter
                Else                                        
                    Reporter.ReportEvent micFail, "Function: 'CarryDataForward' - Failed", "Sheet: '" & aSheet & "' with that column heading: '" & aParameter & "' was not found."                                                                
                    ExitTest
                End If
        End Select                           
        'Loop limiter so bad data doesn't cause the function to repeat endlessley which limits the number of nested CDFs that can be used on the data sheet.
        intLoopLimit = intLoopLimit + 1
        If intLoopLimit > 5 Then
            Reporter.ReportEvent micFail, "Function: CDF()", "Bad data is suspected. Please verify the CDF() string is formatted correctly for semi-colons and matching parentheses." & vbCRLF & "Action " & Environment("ActionName") & vbCRLF & "Data value: " & strCurrentValue, FunCaptureDesktopImageForTestResults
            ExitTest
        End If
    Loop While InStr(strCurrentValue, "CDF(") > 0 'Repeat loop in case more CDF() values exist in string
    'Update DataTable with new value
    DataTable(strNewParameter, strNewSheetNbr) = strCurrentValue
    Wait(1)
End Function

'==================================================================================================
' Jim Sears - 1/19/11
' Process all the Carry data forward parameters for a sheet
'--------------------------------------------------------------------------------------------------
Function FunCDF(intSheetNbr)
    Dim Index, intRow, intParm        
    Dim mySheet: Set mySheet = DataTable.GetSheet(intSheetNbr)
    Dim intRowCount: intRowCount = mySheet.GetRowCount          
    Dim intParmCount: intParmCount = mySheet.GetParameterCount          
    For intRow = 1 to intRowCount                  
        mySheet.SetCurrentRow intRow
        For intParm = 1 to intParmCount                                               
            FunCarryDataForward intParm, intSheetNbr
        Next
    Next
    mySheet.SetCurrentRow 1
End Function

'==================================================================================================
' Jim Sears - 07/20/2015
'--------------------------------------------------------------------------------------------------
'@HP Manual
Public Function FunCheckinTest(objTest, comment) 

    '*******************************************************
    ' The procedure for checking in a Test may change in some future version.
    ' This code should work in the future, however we advise
    ' you to revisit this example after the next version
    ' is released.
    '*******************************************************

    'On Error Resume Next
    'Dim VersionCntl
    'Set VersionCntl = objTest.VCS
    'If Not IsNull(VersionCntl) Then
        'If TypeOf(VersionCntl) Is IVCS Then 
        '    VersionCntl.CheckIn "", comment
        'ElseIf TypeOf(VersionCntl) Is IVersionControl Then
            objTest.VCS.CheckIn "",comment
            'objTest.VCS.CheckIn comment
        'End If
    'End If

    FunCheckinTest = True
    
    If Err.Number <> 0 Then
        FunCheckinTest = False
    End If
End Function

'==================================================================================================
' Jim Sears - 08/09/2011
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Description Function to evaluate two values to be equal, not equal, instring comparison, not instring, etc.
'@Documentation Evaluate <strActualValue> <strComparisonOperator> <strExpectedValue>. Legend "=" is equal to. "!=" is not equal to. "&" is substring match. "!&" is not a substring match. "%%X" is a numerical match with X percent.
Function FunCompare(strReportStepName, strActualValue, strComparisonOperator, strExpectedValue)   
    Dim rc, arrPercent, intPercent, intLower, intUpper, dblActualValue, dblExpectedValue, strReportEventDetails, strReportEventDetailsSubstring
    
   'Check for range comparison using percentage (%%)
    If InStr(strComparisonOperator, "%%") > 0 Then                                   
        arrPercent = Split(strExpectedValue,"%%") 'Split the percentage value from the data value                                                                                                                                         
        intPercent = cInt(arrPercent(0))/100 'Convert the percentage value to a decimal
        strExpectedValue = FunStringReplaceUsingRegularExpression(arrPercent(1),"[A-Za-z_\$,%]", vbNullString)                                                                                                                                                 
        dblExpectedValue = cDbl(strExpectedValue)
        strActualValue = FunStringReplaceUsingRegularExpression(strActualValue,"[A-Za-z_\$,%]", vbNullString) 'Get the data value and strip string characters to get number
        'Convert value to dbl for precise calculation unless App value is null. 11/18/09 Added because screen values that were zero are now null  (blank).
        If strActualValue <> vbNullString Then
            dblActualValue = cDbl(strActualValue)
        Else
            dblActualValue = 0
        End If
        intLower = (1 - intPercent) * dblActualValue 'get lower range using percentage
        intUpper = (1 + intPercent) * dblActualValue 'get upper range using percentage                               
        strReportEventDetailsSubstring = " Range compare was within '" & arrPercent(0) & "' percent."
        rc = FunReportDetails (dblExpectedValue => intLower AND dblExpectedValue <= intUpper, strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
    'Check for && for partial compare
    ElseIf strComparisonOperator = "&&" Then                                                                                                                                                                                         
        strReportEventDetailsSubstring  = " Partial compare where the expected value exists within the string."     
        'If both values are blank the set step to Pass
        If strActualValue = "" ANd strExpectedValue = "" Then
            rc = FunReportDetails (True, strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
        Else
            'If both values are not blank then evaluate
            rc = FunReportDetails (InStr(strActualValue, strExpectedValue) > 0, strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)    
        End If
        
        'Check for != for not equal and return true if a != b
    ElseIf strComparisonOperator = "!=" Then                                                                                                                                                                                           
        strReportEventDetailsSubstring  = " Expected value does not equal actual value as desired."     
        rc = FunReportDetails (strActualValue <> strExpectedValue, strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)                             
        'Check for !& for value a not found any where in value b.
    ElseIf strComparisonOperator = "!&" Then                                                                                                                                                                                       
        strReportEventDetailsSubstring  = " Partial compare where the value does not exist."        
        rc = FunReportDetails (InStr(strActualValue, strExpectedValue) = 0, strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
    Else 'Compare by varType
        Select Case VarType(strActualValue)                                      
            Case 0 'VarType is undefined
                'strReportEventDetailsSubstring = "String compare."
                rc = FunReportDetails (strExpectedValue = strActualValue , strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
            Case 2   
                'strReportEventDetailsSubstring = "Integer compare, automatic rounding is used because the actual value was of type 'integer'. " & strExpectedValue & " was rounded to " & cInt(strExpectedValue)
                rc = FunReportDetails (Eval(cInt(strActualValue) & strComparisonOperator & strExpectedValue), strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
            Case 3 
                'strReportEventDetailsSubstring = "Long compare, automatic rounding is used because the actual value was of type 'long'. " & strExpectedValue & " was rounded to " & cLng(strExpectedValue)
                rc = FunReportDetails (Eval(cLng(strActualValue) & strComparisonOperator & strExpectedValue), strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
             Case 5 
                'strReportEventDetailsSubstring = "Long compare, automatic rounding is used because the actual value was of type 'long'. " & strExpectedValue & " was rounded to " & cLng(strExpectedValue)
                rc = FunReportDetails (Eval(cDbl(strActualValue) & strComparisonOperator & strExpectedValue), strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)               
            Case 7 
                'strReportEventDetailsSubstring = "Date compare, automatic conversion is used because the actual value was of type 'date'."
                rc = FunReportDetails (Eval(cDate(strActualValue) & strComparisonOperator & strExpectedValue), strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)                                               
            Case 8 
                'strReportEventDetailsSubstring = "String compare."
                rc = FunReportDetails (strActualValue = strExpectedValue, strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
            Case 11                                                                 
                If strActualValue = False and cBool(strExpectedValue) = False Then
                    rc = FunReportDetails (strActualValue = cBool(strExpectedValue), strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
                Else
                    rc = FunReportDetails (strActualValue AND cBool(strExpectedValue), strActualValue, strExpectedValue, strReportStepName, strReportEventDetails & strReportEventDetailsSubstring)
                End If                                                    
            Case Else
                Reporter.ReportEvent micFail, "Function: FunCompare", "Data type for expected value is unknown and comparison can not be completed. Please request code enhancement for this new variable type. Variable Type = " & VarType(strActualValue) & vbCRLF & strReportStepName & vbCRLF & strActualValue & vbCRLF & strExpectedValue
        End Select
    End If  
    FunCompare = rc
End Function

'==================================================================================================
' Jim Sears - 01/01/2008
'--------------------------------------------------------------------------------------------------
'@Description Function to evaluate two values to be equal, not equal, instring comparison, not instring, etc. Stop test if comparison fails
'@Documentation Evaluate <strActualValue> <strComparisonOperator> <strExpectedValue> and exit test if comparison fails. Legend "=" is equal to. "!=" is not equal to. "&" is substring match. "!&" is not a substring match. "%%X" is a numerical match with X percent.
'@Expected Value: <strExpectedValue>
Function FunCompareExitOnFail(strReportStepName, strActualValue, strComparisonOperator, strExpectedValue)
    If NOT FunCompare(strReportStepName, strActualValue, strComparisonOperator, strExpectedValue) Then                       
        'SubUpdateQCRunComments strReportStepName & " " & strActualValue & " " & DataTable("DATA_SCENARIO", FunGetSheetNbr)
        ExitTestIteration
    End If
End Function

'==================================================================================================
' Jim Sears
' 4/19/16
' Execute a line of UFT code dynamically when reading the data table
'--------------------------------------------------------------------------------------------------
'@Read and execute a line of code stored in the datatabe. Ideal for data driven CheckPoints
Function FunEval
	Dim rc, i, strCellValue, strFieldInfo, intSheetNbr:intSheetNbr = FunGetSheetNbr
	'==============================================


	'==============================================
	For i = 1 to DataTable.GetSheet(intSheetNbr).GetParameterCount 'limit loop to number of populated columns			
		If FunParameterExists(intSheetNbr, "VAL_" & i) Then 'Process columns with name 'VAL_' 
			strCellValue = DataTable("EVAL_" & i, intSheetNbr)		
			'Error Handling 
			If strCellValue = vbNullString Then
				Exit Function
			Else
				rc = Eval(strCellvalue)
			End If
		End If
	Next
End Function

'==================================================================================================
' Jim Sears
' 11/15/16
'--------------------------------------------------------------------------------------------------
'@Overwrite UFT Method to reduce report writing
Function FunExist(obj, intTimeOut)  

	Dim intReportFilter: intReportFilter = Reporter.Filter
	Reporter.Filter = 1
	FunExist = obj.Exist(intTimeOut)
	Reporter.Filter = intReportFilter

End Function

'==================================================================================================
' Jim Sears - 01/08/09
'--------------------------------------------------------------------------------------------------
'@Returns the current date & time in one long number yydddhhmmssm
Public Function FunDateTimeStamp()
    Dim strDayOfYear, strYear, strMonth, strDay, strHour, strMinute, strSecond, intElapsedTime, strMillisecond

    MercuryTimers("FunDateTimeStampTimer").Start           
    strYear = Right(Year(Now),2)
    'Day of the year 1 to 365
    strDayOfYear = FunPad(DatePart("y", Now))    
    'Pad
    If Len(strDayOfYear) = 1 Then 'Add leading 0 if day of year is only 2 characters long
                    strDayOfYear = "00" & strDay
    End If
    If Len(strDayOfYear) = 2 Then 'Add leading 0 if day of year is only 2 characters long
                    strDayOfYear = "0" & strDay
    End If
    
    strMonth = FunPad(Month(Now))
    strDay = FunPad(Day(Now))
	strHour = FunPad(Hour(Now))
	strMinute = FunPad(Minute(Now))
    strSecond = FunPad(Second(Now))

    MercuryTimers("FunDateTimeStampTimer").Stop 
    intElapsedTime = MercuryTimers("FunDateTimeStampTimer").ElapsedTime / 1000
    strMillisecond = Right(intElapsedTime, 1)              
    
    FunDateTimeStamp = strYear & strDayOfYear & strHour & strMinute & strSecond & strMillisecond    
    'FunDateTimeStamp = strDay & strHour & strMinute & strSecond & strMillisecond    
End Function

'==================================================================================================
' Jim Sears - 05/11/2016
'--------------------------------------------------------------------------------------------------
'@Get ActionName (without TestName) for current loaded and running action
Public Function FunGetActionName()    	
	If InStr(Environment("ActionName"),"[") > 0 Then
		FunGetActionName = Mid(Environment("ActionName"), InStr(Environment("ActionName"), "["), Instr(2, Environment("ActionName"),"]") - InStr(Environment("ActionName"), "[") + 1) & " "
	Else
		FunGetActionName = Environment("ActionName")
	End If
End Function

'==================================================================================================
' Jim Sears - 08/12/2011
'--------------------------------------------------------------------------------------------------
'@Get path to ACTION from data source for LoadAndRunAction method so action location can be managed for all scripts from one source.
Public Function FunGetActionPath(strActionName)      
    'Performance monitor
    MercuryTimers("GET_ACTION_PATH").Start 

    Dim strFolder, strFileName, strExcelDataFile, strActionPath
    Dim objConnection, objRecordSet, strSQL, rc
    
    '_________________CONNECT TO EXECEL DATA SOURCE _________________________
    'Initialize
    Const adCursorType = 3  'http://www.w3schools.com/ADO/met_rs_open.asp#CursorTypeEnum
    Const adLockType = 1  'http://www.w3schools.com/ADO/met_rs_open.asp#LockTypeEnum
    Const adCmdType = &H0001
    Set objConnection = CreateObject("ADODB.Connection")
    Set objRecordSet = CreateObject("ADODB.Recordset")

    'Excel string query
    'strSQL = "select ACTION_PATH from [INFO$] where ACTION = '" & strActionName & "'"               
    'MySql string query
    strSQL = "SELECT ACTION_PATH FROM ACTIONS WHERE DATA_SCENARIO = '" & strActionName & "'"      
    
    'MySql Connect and populate result set
    'objConnection.Open "Provider=MSDASQL;Driver={MySQL ODBC 5.2w Driver};Server=USNYW7WJSRS;Database=killer;User=jsrs;Option=3;"
    'objConnection.Open "Provider=MSDASQL;Driver={MySQL ODBC 5.1 Driver};Server=USNYW7WJSRS;Database=killer;User=JIM SEARS;Option=3;"
    'Access connection
    Dim strDbHost
    'If strDbHost = vbNullString Then strDbHost = "Z:\DATA\ARTS.accdb" 
    
    Dim strCnxn
    'strCnxn = "Provider=Microsoft.ACE.OLEDB.12.0;" & "Data Source=" & strDbHost & ";" & "Persist Security Info=False;"    
    'strCnxn = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=" & strDbHost & ";"
    'strCnxn = "Provider=MSDASQL; Driver={MySQL ODBC 5.3 ANSI Driver};Server=10.49.56.84;Port=3306;Database=TAF;User=ReadOnly;PWD=Auto6701;Option=3;"
	strCnxn = "Provider=MSDASQL; Driver={MySQL ODBC 5.3 ANSI Driver};Server=td9723826.tfs.toyota.com;Port=3306;Database=" & FunGetDB & ";User=ReadOnly;PWD=Auto6701;Option=3;"
    objConnection.Open (strCnxn)
    
    objRecordset.Open strSQL, objConnection, adCursorType, adLockType, adCmdType
    
    'Excel - Connect to data source  and populate result set
    'objConnection.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source="  & Environment("ArtsTestDataFilePath") & ";Extended Properties=" & Chr(34) & "Excel 12.0 Macro;HDR=YES;IMEX=1;Mode=Read; ReadOnly=True;" & Chr(34) & ";"
    'Set objRecordset = objConnection.Execute (strSQL)
    
    If objRecordset.BOF AND objRecordset.EOF Then
        'Reporter.ReportEvent micFail, "Function: FunGetActionPath", "Action path not found in data table for Action: '" & strActionName & "' from data file: '" & Environment("ArtsTestDataFile") & "'."
        Reporter.ReportEvent micFail, "Function: FunGetActionPath", "Action path not found in data table for Action: '" & strActionName & "'."
        'SubUpdateQCRunComments "Action path not found in data table for Action: '" & strActionName & "' from data file: '" & Environment("ArtsTestDataFile") & "'."
        ExitTest
    End If

                'Print result set
'               Do Until objRecordset.EOF
                                strActionPath = objRecordset(0).Value '.Item("ACTION_PATH") 
'                               Print strActionName & " has path " & strActionPath 
'                               objRecordset.MoveNext
'               Loop

    'Clean up
    objRecordset.Close
    Set objRecordSet = Nothing
    objConnection.Close
    Set objConnection = Nothing
    
    If Len(strActionPath) = 0 OR isNull(strActionPath) Then
                    Reporter.ReportEvent micFail, "Function: FunGetActionPath", "Action path not set for '" & strActionName & "' in data file: '" & Environment("ArtsTestDataFile") & "'."
                    SubUpdateQCRunComments "Action path not set for '" & strActionName & "' in data file: '" & Environment("ArtsTestDataFile") & "'."
                    Exit Function
    End If
    FunGetActionPath = strActionPath

    MercuryTimers("GET_ACTION_PATH").Stop
    Environment("GetActionPath") = MercuryTimers("GET_ACTION_PATH").ElapsedTime / 1000     
End Function

'==================================================================================================
' Jim Sears - 09/27/05
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Get Attachment from Quality Center Test object such as a test case or folder.
Public Function FunGetAttachmentFromTestObject (objTestObject, strFileName)
    Dim intPos, objAttachmentFactory, arrAttachmentList, objAttachment
    Set objAttachmentFactory = objTestObject.Attachments
    Set arrAttachmentList = objAttachmentFactory.NewList("SELECT * FROM CROS_REF")

    FunGetAttachmentFromTestObject = vbNullString 'Return empty string if atthachment isn't found
    For Each objAttachment in arrAttachmentList
        If StrComp(objAttachment.Name(1), strFileName, 1) = False Then
            'strFileName = objAttachment.Name
            'intPos = Instr(1, objAttachment.ServerFileName, objAttachment.Name, 1)
            objAttachment.Load True, vbNullString
            FunGetAttachmentFromTestObject = objAttachment.FileName                                               
            Exit For
        End If
    Next
    'Cleanup              
    Set objAttachmentFactory = Nothing
    Set arrAttachmentList = Nothing
End Function

'==================================================================================================
' Jim Sears - 09/1/09
' Function to support getting tag when procession a singel excel cell with multiple CDF values.
'--------------------------------------------------------------------------------------------------
Function FunGetEndTag(aString, strStartTag)
    Dim Left_P, Right_P, End_Tag, Index, Char
    'End_Tag = InStr(strStartTag, aString, ")") 
    'Nested parenthesis requires checking each character which should make it slower but may be the only way.
    'Count how many ( and count  ) until both counts are equal then return end tag.
    Left_P = 1 'First char is a left parenthesis
    Right_P = 0
    End_Tag = 0
    For Index = strStartTag To Len(aString)
        Char = Mid(aString, Index, 1)
        If Char = "(" Then
            Left_P = Left_P + 1
        End If
        If Char = ")" Then
            Right_P = Right_P + 1
        End If
        If Left_P = Right_P Then
            FunGetEndTag = Index
            Exit For
        End If
    Next
End Function

'==================================================================================================
' Jim Sears - 05/13/2016
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Create text file of browser session info (URL, User, Password, Browser Type) if not exist 
'or compare text file to current test and reuse session if session is still open, logged in.
'Also checks if session is less than 15 minutes old since last login.
Function FunReuseBrowser(strDefaultBrowser, strURL, strUser, strPassword)
	
	'Get Browser from QC Test Set or use default browser provided by user
	Dim strBrowser: strBrowser = FunGetBrowserTypeFromTestSetName(strDefaultBrowser)
	
	Dim objFSO, objFile, strFileText
	Dim strFileName: strFileName = "ReuseSession.txt"	
	Set objFSO=CreateObject("Scripting.FileSystemObject")
    '-------------------


	'-------------------
	'Check if exists	
	If objFSO.FileExists(strFileName) Then
		'Open File
		Set objFile = objFSO.OpenTextFile(strFileName, 1, True)
		'Read Text in file
		On Error Resume Next
			strFileText = objFile.ReadAll
			'Get Session time from file
			Dim dtSessionTime
			If InStr(strFileText, "Date>") > 0 Then
				dtSessionTime = cDate(Mid(strFileText, InStr(strFileText, "Date>") + 5))
			Else
				dtSessionTime = cDate("01/01/2000 01:00:00 AM")		
			End If			
		On Error Goto 0
		objFile.Close
		
		'Compare current credentials to file credentials
		If InStr(strFileText, strBrowser) > 0 And _
				InStr(strFileText, strURL) > 0 And _
				InStr(strFileText, strUser) > 0 And _
				InStr(strFileText, strPassword) > 0 And _
				DateDiff("n", dtSessionTime, Now()) < 15 Then
				
			'Update text file with currents details (new session time)
			Set objFile = objFSO.CreateTextFile(strFileName, True)
  			objFile.WriteLine strBrowser & ":" & strURL & ":" & strUser & ":" & strPassword & ":Date>" & Now()  		
			objFile.Close	
				
			FunReuseBrowser = True			
		Else
			'Update existing text file with new details
			Set objFile = objFSO.CreateTextFile(strFileName, True)
  			objFile.WriteLine strBrowser & ":" & strURL & ":" & strUser & ":" & strPassword & ":Date>" & Now()  		
			objFile.Close
			
			FunReuseBrowser = False			
		End If
  	Else 
  		'File doesn't exist then create it and write session info (if not null otherwise error occurs reading empty file.)
  		If (strBrowser & ":" & strURL & ":" & strUser & ":" & strPassword) <> vbNullString Then
  			Set objFile = objFSO.CreateTextFile(strFileName, True)
  			objFile.WriteLine strBrowser & ":" & strURL & ":" & strUser & ":" & strPassword & ":Date>" & Now()
			objFile.Close	
  		End If
  		
	    FunReuseBrowser = False
	End If 
	'-------------------
	
		   
    '-------------------
    'CleanUp	
    Set objFile = Nothing
    Set objFSO = Nothing    
End Function   

'==================================================================================================
' Jim Sears - 05/13/2016
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Get Browser Type from QC Test Set Name or return the default browser name provided by the user
'Accomadates execution from QC or not from QC. NOTE: Test Set name contains browser type.
Function FunGetBrowserTypeFromTestSetName(strDefaultBrowser)
	Dim strTestSetName: strTestSetName = FunGetQCTestSetName()
	
	Select Case True
        Case InStr(strTestSetName, "IE") > 0
            FunGetBrowserTypeFromTestSetName = "IE"
        Case InStr(strTestSetName, "CHROME") > 0
            FunGetBrowserTypeFromTestSetName = "CHROME"
        Case InStr(strTestSetName, "FIREFOX") > 0
            FunGetBrowserTypeFromTestSetName = "FIREFOX"
        Case Else 'Set default value when not test is not run from ALM test set. 
        	'Error Handling
        	If strDefaultBrowser = vbNullString Then
        		SubReport "micFail", "Unable to determine browser type, please specify browser type for function 'FunGetBrowserTypeFromTestSetName'","Parameter error in calling function 'FunGetBrowserTypeFromTestSetName'"
        	End If
        	FunGetBrowserTypeFromTestSetName = strDefaultBrowser    		
    End Select                
End Function

'==================================================================================================
' Jim Sears - 02/09/2016
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Launch Browser based on Test Set name or use parameter value to use default browser. Enable resource monitor to track memory usage
Sub SubOpenBrowser(strURL, strDefaultBrowser, blnResourceMonitor)
    Dim strBrowser, strTestSetName: strTestSetName = FunGetQCTestSetName()
    '--------------------------
    
    
    '--------------------------
	'Close all browser instances
	Do While Browser("index:=0").Exist(0)  
		Browser("index:=0").CloseAllTabs		
	Loop
	'--------------------------    
	
	
	'--------------------------
    'Open browser   
	Select Case FunGetBrowserTypeFromTestSetName(strDefaultBrowser)		
    	Case "IE" 
			'If blnResourceMonitor Then FunSetResourceMonitor "iexplore"
            SystemUtil.Run "C:\Program Files (x86)\Internet Explorer\iexplore.exe", strURL,"%HOMEDRIVE%%HOMEPATH%", "open", 3 '"-k"
            strBrowser = "IE"
        Case "CHROME"
            'If blnResourceMonitor Then FunSetResourceMonitor "chrome"
            'SubDeleteChromeCookies
            SystemUtil.Run "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe", "--disable-session-crashed-bubble --hide-infobars " & strURL,"%HOMEDRIVE%%HOMEPATH%", "open", 3 '"--start-maximized" --kiosk --incognito --hide-infobars
            strBrowser = "CHROME"
        Case "FIREFOX"
            'If blnResourceMonitor Then FunSetResourceMonitor "firefox"    
            SystemUtil.Run "C:\Program Files\Mozilla Firefox\firefox.exe", strURL,"%HOMEDRIVE%%HOMEPATH%", "open", 3 '"-fullscreen"
            strBrowser = "FIREFOX"                   
    End Select   

	On Error Resume Next
    
	Browser("index:=0").Sync
	Browser("index:=0").ClearCache
	Browser("index:=0").DeleteCookies
	
	On Error GoTo 0
		
    SubReport "micPass", "Browser", "Open: [" & strBrowser & "] to [" & strURL & "]"    
    
End Sub

'==================================================================================================
' Jim Sears - 09/1/2011
'--------------------------------------------------------------------------------------------------
'@Function to return a property of a file, I.E. DateLastModified 
Function FunGetFileProperties(strFile, strFileProperty)
    'Used mostly to get File properties of the 'Functions.vbs' so that the file version can be printed to the report in case of script failure.
    Dim fso, f
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set f = fso.GetFile(strFile)
    FunGetFileProperties = Eval("f." & strFileProperty)
    Set f = Nothing
    Set fso = Nothing
End Function

'==================================================================================================
' Jim Sears - 09/1/2011
' Function to convert value to function key
'--------------------------------------------------------------------------------------------------
Function FunGetPFKey(strNemonicKey)
If InStr(strNemonicKey, "@") > 0 Then
	Select Case strNemonicKey
			Case "@1"
			    FunGetPFKey = "PF1"
			Case "@2"
			    FunGetPFKey = "PF2"                                    
			Case "@3"
			    FunGetPFKey = "PF3"                                    
			Case "@4"
			    FunGetPFKey = "PF4"                                    
			Case "@5"
			    FunGetPFKey = "PF5"                                    
			Case "@6"
			    FunGetPFKey = "PF6"                                    
			Case "@7"
			    FunGetPFKey = "PF7"                                    
			Case "@8"
			    FunGetPFKey = "PF8"                                    
			Case "@9"
			    FunGetPFKey = "PF9"         
			Case "@a"
			    FunGetPFKey = "PF10"                                  
			Case "@b"
			    FunGetPFKey = "PF11"                                  
			Case "@c"
			    FunGetPFKey = "PF12"                                  
			Case "@d"
			    FunGetPFKey = "PF13"                                  
			Case "@e"
			    FunGetPFKey = "PF14"                                  
			Case "@f"
			    FunGetPFKey = "PF15"                                  
			Case "@g"
			    FunGetPFKey = "PF16"                                  
			Case "@h"
			    FunGetPFKey = "PF17"                                  
			Case "@i"
			    FunGetPFKey = "PF18"                                  
			Case "@j"
			    FunGetPFKey = "PF19"                                  
			Case "@k"
			    FunGetPFKey = "PF20"                                  
			Case "@l"
			    FunGetPFKey = "PF21"                                  
			Case "@m"
			    FunGetPFKey = "PF22"                                  
			Case "@n"
			    FunGetPFKey = "PF23"                                  
			Case "@o"
			    FunGetPFKey = "PF24"                                                                                  
			Case "@E"
			    FunGetPFKey = "Enter"
			Case "@T"
			    FunGetPFKey = "Tab"
			Case Else
			    FunGetPFKey = "Key '" & strNemonicKey & "' is undefined."
		End Select
    Else
		FunGetPFKey = strNemonicKey
    End If
End Function

'==================================================================================================
' Jim Sears - 06/09/2016
'--------------------------------------------------------------------------------------------------
'@ User defined function to return Test Set Description of the QC Test Set if test is running from QC.
Function FunGetQCTestSetDesc()
    If FunALMConnected Then 'Check for QC connectivity                       
        If Not QCUtil.CurrentTestSet Is Nothing Then
            FunGetQCTestSetDesc = Replace(QCUtil.CurrentTestSet.Field("CY_COMMENT"), "&amp;", "&")
        Else
            FunGetQCTestSetDesc = vbNullString
        End If                   
    Else
        FunGetQCTestSetDesc = vbNullString
    End If
End Function

Function FunGetParmFromQCTestSetDesc(strParam)
	'Get Parameter from QC Test Set description if available. 
	'Then get the brackets immediately following the parameter name and return the value.
	'-------------------
	
	
	'-------------------
	Dim intParam, strTestSetDesc, intLeftBracket, intRightBracket	
	'Get Test Set description
	strTestSetDesc = FunGetQCTestSetDesc
	'-------------------
	
	
	'-------------------
	'Get Test Set description if Test is run from QC
	If strTestSetDesc <> vbNullString Then
		'Check Parameter exists in the Test Set description
		intParam = InStr(strTestSetDesc, strParam) 
		If intParam > 0 Then
			'Check brackets exist in description
			intLeftBracket = InStr(intParam, strTestSetDesc, "[") 
			intRightBracket = InSTr(intLeftBracket + 1, strTestSetDesc, "]")
			If intLeftBracket = 0 Or intRightBracket = 0 Then
				SubReport "micFail", "Parameter was listed in the QC Test Set Description but the open and close brackets [] were not. Please ensure the brackets are following the Parameter.", _
									"Parameter was listed in the QC Test Set Description but the open and close brackets [] were not. Please ensure the brackets are following the Parameter."
				FunGetParmFromQCTestSetDesc = vbNullString
			Else				
				FunGetParmFromQCTestSetDesc = Mid(strTestSetDesc, intLeftBracket + 1, intRightBracket - (intLeftBracket + 1))
				SubReport "micInfo", "Used the QC Test Set Parm [" & strParam & "]", "[" & Mid(strTestSetDesc, intLeftBracket + 1, intRightBracket - (intLeftBracket + 1)) & "]"
			End If			
		End If
	End If
End Function

'==================================================================================================
' Jim Sears - 04/07/2011
'--------------------------------------------------------------------------------------------------
'@ User defined function to return the name of the QC Test Set if test is running from QC.
Function FunGetQCTestSetName()
    If FunALMConnected Then 'Check for QC connectivity                       
        If Not QCUtil.CurrentTestSet Is Nothing Then
            FunGetQCTestSetName = QCUtil.CurrentTestSet.Name 
        Else
            FunGetQCTestSetName = vbNullString
        End If                   
    Else
        FunGetQCTestSetName = vbNullString
    End If
End Function

'==================================================================================================
'Jim Sears - 11/13/2012  Leap Year!
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Get a UFT Option for Image capture 
Function FunGetUFTCaptureLevel 
    'Don't try to debug or UFT will crash when creating the object
    Dim qtApp
    Set qtApp = CreateObject("QuickTest.Application") ' Create the Application object

    If NOT qtApp Is Nothing Then
        FunGetUFTCaptureLevel = qtApp.Options.Run.ImageCaptureForTestResults        
        Set qtApp = Nothing
    Else
        FunGetUFTCaptureLevel = "Never"    
    End If    
    
End Function

'==================================================================================================
' Jim Sears - 04/06/2012
'--------------------------------------------------------------------------------------------------
'@Get path to Resource
Function FunGetResourcePath(strResourceName)
    Dim QTP, cLibs, LibIndex, strResource, strPath
    Set QTP=CreateObject("Quicktest.Application")  
      
    'Get All Associated Resources  
    set cLibs = QTP.Test.Settings.Resources.Libraries  
      
    For LibIndex=1 to cLibs.Count  
        strResource = cLibs.Item(LibIndex)
        'Using PathFinder object locate and display the Absolute path for given resource 
        If InStr(1, uCase(strResource), uCase(strResourceName)) > 0 Then
            strPath = PathFinder.Locate(strResource)
            FunGetResourcePath = Replace(strPath, Mid(strPath, InStrRev(strPath,"\")), vbNullString)
            Exit For 'Exit if resource was found for efficiency
        End If
    Next  
    'Clean up
    Set cLibs = Nothing
    Set QTP = Nothing           
End Function

'==================================================================================================
' Jim Sears - 1/17/07
'--------------------------------------------------------------------------------------------------
'@ User defined function to return the tab index of a sheet on a dataTable 
'@ Specifically used because imported sheets names have the '[' symbol.
Function FunGetSheetNbr()
	Dim ActionName, SheetName, Index
	'==================================================
	
	
	'==================================================
	'Get ACTION name and remove any text with brackets
	ActionName = Environment("ActionName")
	'check for [ symbol     
	If InStr(ActionName, "[") Then
        ActionName = Left(ActionName, InStr(ActionName," [")-1)
	End If
	'==================================================
	
	
	'==================================================
	'Loop thru all tabs to find a match to the ACTION name                  
	For Index = 1 to DataTable.GetSheetCount + 1
	    SheetName = DataTable.GetSheet(Index).Name
	    If InStr(SheetName, "[") Then
	        SheetName = Left(SheetName, InStr(SheetName," [")-1)
		End If
	    If SheetName = ActionName Then
	        FunGetSheetNbr = Index
			Exit Function 
	    End IF
	Next
	'==================================================
	
	
	'==================================================
	'Return error if match not found.
	SubReport "micFail", "FunGetSheetNbr", "Error: Data Table sheet tab was not found."
	FunGetSheetNbr = 0
End Function

'==================================================================================================
' Jim Sears - 1/17/07
' User defined function to return the tab index of a sheet on a dataTable. Specifically for tab names that have the [ symbol.
'--------------------------------------------------------------------------------------------------
Function FunGetSheetNbrByName(strSheetName)
    Dim index, strSheetTabName
    '==================================================


    '==================================================
    'Iterate through all sheets until match is found, ignoring/removing text with brackets
    For index = 1 to DataTable.GetSheetCount 
        strSheetTabName = DataTable.GetSheet(index).Name
        If InStr(strSheetTabName, "[") Then
            strSheetTabName = Left(strSheetTabName, InStr(strSheetTabName," [")-1)
		End If
        If strSheetTabName = strSheetName Then
            FunGetSheetNbrByName = index
			Exit Function 
        End If
    Next
    '==================================================


    '==================================================
    'Return error if match not found.
    Reporter.ReportEvent micFail, "FunGetSheetNbrByName", "Data Table sheet index for sheet name: '" & strSheetName & "' was not found."
    FunGetSheetNbrByName = -1
End Function

'==================================================================================================
'Jim Sears - 10/11/2012
'--------------------------------------------------------------------------------------------------
'@Get system variable by name. Example Temp returns temp folder and path unique to each PC. Same as entering %temp% on the run command.
Function FunGetEnvironmentVariable(strVariableName)
    Dim objEnvironment: Set objEnvironment = CreateObject("WScript.Shell").Environment("Process")
    FunGetEnvironmentVariable = objEnvironment(strVariableName)
    Set objEnvironment = Nothing
End Function


'==================================================================================================
' Jim Sears   06/27/16 (updated to remove case statement 10/14/2016)
'--------------------------------------------------------------------------------------------------
'@Get Test database based on Test Name or Component name
Function FunGetDB() 
'==================================================
	'Get database schema from test name environment variable
	Select Case uCase(Left(Environment("TestName"), InStr(Environment("TestName"), "_") - 1))	
		Case "CEP"
			FunGetDB = "TAF"
		Case "SFCC"
			FunGetDB = "TAF"
		Case "SFCEP"
			FunGetDB = "TAF"
		Case "SFCR"
			FunGetDB = "TAF"
		Case "LD"
			FunGetDB = "TD"
		Case "TD"
			FunGetDB = "TD"			
		Case Else
			FunGetDB = uCase(Left(Environment("TestName"), InStr(Environment("TestName"), "_") - 1))	
	End Select
End Function

Function FunGetDB_CW(MySQLQuerry) 
	Dim Env
	
	Env=uCase(Left(Environment("TestName"), InStr(Environment("TestName"), "_") - 1))

	If Instr(MySQLQuerry,"TEST_SCENARIO")>0 Then
		FunGetDB_CW=Env
		Else  FunGetDB_CW="TD"
	End If
	
End Function

'==================================================================================================
' Jim Sears - 13/30/2012
'--------------------------------------------------------------------------------------------------
'@ User defined function to return all mandatory object properties for an object using class property list located in registry
Function FunGetROProperties(strClass, objObject)
    Dim i, sNamesTO,sNamesRO, sKeyPath
    Dim oReg, arrNames, intCnt
    'All object properties defined in UFT under Automation Run & Record settings are the mandatory properties used by UFT to find an object
    'That list of properties is stored in the Registry. This function uses that list to display/print all object properties by class

    'Permissions
    'Const HKEY_LOCAL_MACHINE = &H80000002
    Const HKEY_CURRENT_USER = &H80000001
    Set oReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv")
    'Object Repository path - Varies by PC and installation
    'sKeyPath = "SOFTWARE\Mercury Interactive\QuickTest Professional\MicTest\Test Objects\Link\Properties"
    sKeyPath = "SOFTWARE\Mercury Interactive\QuickTest Professional\MicTest\Test Objects\" & strClass & "\Properties"
    oReg.EnumValues HKEY_CURRENT_USER, sKeyPath, arrNames

    'sNamesTO = "GetTOProperty for Test Object" & vbNewLine & "Identfication Properties: Values" & vbNewLine
    sNamesRO = "GetROProperty for Test Object" & vbNewLine & "Identfication Properties: Values" & vbNewLine
    
    For i = 0 to UBound(arrNames)
		'sNamesTO = sNamesTO & arrNames(i) & ": " & objObject.GetTOProperty(arrNames(i)) & vbNewLine
		sNamesRO = sNamesRO & arrNames(i) & ": " & objObject.GetROProperty(arrNames(i)) & vbNewLine                   
		'DataTable.SetCurrentRow DataTable.GetSheet(dtLocalSheet).GetRowCount
		'intCnt = DataTable.GetSheet(dtLocalSheet).GetRowCount +1
		'DataTable.GetSheet(dtLocalSheet).SetCurrentRow intCnt
		'DataTable("Name",dtLocalSheet) =arrNames(i) 
		'DataTable("Value",dtLocalSheet) = objObject.GetROProperty(arrNames(i))                      
    Next
    
    'MsgBox sNamesTO
    'MsgBox sNamesRO
    Print "micclass: " & strClass & vbNewLine & sNamesRO
    FunGetROProperties = sNamesRO
End Function

'==================================================================================================
' Jim Sears - 09/25/2015
'--------------------------------------------------------------------------------------------------
'@ User defined function to check if current PC is Lab PC.
Function FunIsLabPC
    Dim strHostName: strHostName = uCase(Environment("LocalHostName"))
    Dim strLab
    strLab = "TD9420110,TD9723821,TD9723829,TD9723863,TD9738687,TD9738691," & _
    		 "TD9738732,TD9738745,TD9738737,TD9738735,TD9738697,TD9738770"
    
    'My PC (Jim)
    'strLab = strLab & "PL97289001"
    
    If InStr(uCase(strLab), uCase(strHostName)) > 0 Then
        FunIsLabPC = True
    Else
        FunIsLabPC = False
    End If
End Function

'==================================================================================================
' Jim Sears - 08/19/2015
'--------------------------------------------------------------------------------------------------
'@ Query for similiar processes and count to see if a process is running
Function FunIsProcessRunning(strProcessName)
    On Error Resume Next
    Dim objWMIService, strWMIQuery, WScript, WshShell, strUserName
    Dim processList, process, colProperties, strNameOfUser, strUserDomain
    
    Set WshShell = CreateObject("WScript.Shell")
    strUserName = WshShell.ExpandEnvironmentStrings("%USERNAME%")
    strWMIQuery = "Select * from Win64_Process where Name = '" & strProcessName & "'"
    Set objWMIService = GetObject("winmgmts:" & "{impersonationLevel=impersonate}!\\" & Environment("LocalHostName") & "\root\cimv2")
    '---------------------------------
    
    
    '---------------------------------
    Set processList = objWMIService.ExecQuery(strWMIQuery)
    'Loop through all processess looking at User who owns process.
    For Each process In processList
        colProperties = process.GetOwner(strUserName, UserDomainName)
        MsgBox "Process " & process.Name & " is owned by " & "\" & strUserName & "."
        If strNameOfUser = strUserName Then
            FunIsProcessRunning = True
            Set objWMIService = Nothing
            Exit Function
        End If
    Next
    '---------------------------------
    
    
    '---------------------------------    
    If err.number <> 0 Then
        'If all processess were reviewed and none were owned by user then process isn't running.
        FunIsProcessRunning = False
        Set objWMIService = Nothing    
    End If    
End Function 

'==================================================================================================
' Jim Sears - 02/24/2009
'--------------------------------------------------------------------------------------------------
'@User defined function to add leading zero to date and time values
Function FunPad(x) 'add leading zero if needed
    If Len(x) = 1 Then
        FunPad = "0" & x
    Else
        FunPad = x                            
    End If
End Function

'==================================================================================================
' Jim Sears - 08/12/2011
'--------------------------------------------------------------------------------------------------
'@User defined function to check if a parameter exists on a datatable
Function FunParameterExists(strSheetName, strParameterName)
    Dim strValue
    FunParameterExists = FALSE

    On Error Resume Next
	    strValue = DataTable(strParameterName, strSheetName)
	    If Err.Number <> 0 Then
	                    FunParameterExists = False
	    Else
	                    FunParameterExists = True
	    End If
	    Err.Clear
    On Error Goto 0
End Function 

'==================================================================================================

' Jim Sears - 08/09/2011
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Formated report statement for reporting purposes in UFT Test results. 
Function FunReportDetails (blnMATCH, strActualValue, strExpectedValue, strReportStepName, strReportEventDetails)       
    Dim strActionName
    '==================================================


    '==================================================
    'Action Name
    strActionName = FunGetActionName
    '==================================================


    '==================================================
    'Add a period to the end of the strReportStepName in case the user doesn't. Proper grammar, I hope, and is needed to generate the proper reports for the QC Dashboard Excel report Unique Application Steps 
    If Right(Trim(strReportStepName), 1) <> "." Then
        strReportStepName = strReportStepName & "."
    End If
    '==================================================


    '==================================================
    'Report result
    If blnMATCH Then                                                           
       SubReport "micPass", strReportStepName, "Validation: " & strReportStepName & " Actual Value:- [" & strActualValue & "]" & vbCR & "Expected value:- [" & strExpectedValue & "]" & strReportEventDetails        
    Else
    	Reporter.ReportEvent micFail, strReportStepName, "Validation: " & strReportStepName & " Actual Value:- [" & strActualValue & "]" & vbCR & "Expected value:- [" & strExpectedValue & "]" & strReportEventDetails, FunCaptureDesktopImageForTestResults 
    End If
    '==================================================

    
    '==================================================
    'Return result in case ACTION calling this report statement includes decision logic based on the result.
    FunReportDetails = blnMATCH
End Function

'==================================================================================================
'Jim Sears - 08/17/2015
'--------------------------------------------------------------------------------------------------
'@Set resource monitor programmatically based on browser type
Public Function FunSetResourceMonitor(strBrowser)
    Dim qtApp
    Set qtApp = CreateObject("QuickTest.Application")
	'==================================================
    
	'==================================================
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' System Local Monitoring settings
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'strBrowser must be 'firefox', 'chrome' or 'iexplore'
    'MB limit is 30 or test will fail
    'MB limit of -1 is no limit    
	'==================================================
   

	'==================================================
    'Remove existing
    With qtApp.Test.Settings.LocalSystemMonitor
        .ApplicationName = ""
        .Enable = False
        .SampleRate = 1
        .SystemCounters.RemoveAll        
    End With 
	
	Select Case strBrowser
    	Case "IE"
    		'Add
		    With qtApp.Test.Settings.LocalSystemMonitor
		        .ApplicationName = "iexplore"
		        .Enable = True
		        .SampleRate = 1
		        .SystemCounters.RemoveAll
		        .SystemCounters.Add "Memory Usage (in MB)", 500
		    End With
		    Set qtApp = Nothing
		    
		Case "CHROME" 
    		'Add
    		'Not currently available for SystemMonitor
    		'NOTE: Failed tests that trigger FunFailTest for browser tests on CHROME will capture memory usage at the time of the failure.
		End Select
	Reporter.ReportEvent micDone, "Enable Resource Monitor", "Resource monitor enabled for [" & strBrowser & "]."
End Function

'==================================================================================================
' Rodney Salyer - 9/19/07
' User defined function to check for specific values and if found, overrides the data.  Use with SelectWhenNotNull and SetWhenNotNull functions.
'--------------------------------------------------------------------------------------------------
'@Description Checks for specific values and if found, overrides the data
Function FunTransformSpecialData(strX)
    Select Case uCase(Trim(strX))
        Case "<BLANK>"
            strX = vbNullString
        Case "<SPACE>"
            strX = " "
        Case Else
    End Select
    FunTransformSpecialData = strX
End Function

'==================================================================================================
'Jim Sears - 08/10/2011
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Load data and perform functions that are relevant to all ACTIONS.
Sub SubActionInitialize()    
    MercuryTimers("LOAD_ACTION").Stop
    Dim intElapsedTime:intElapsedTime = MercuryTimers("LOAD_ACTION").ElapsedTime / 1000
    '==================================================


    '==================================================    
    On Error Resume Next  'Error handling because debug mode when running actions as stand alone does not generate the Environment("GetActionPath") load time variable.
        'Error Handling when running actions locally to handle Environment("ExecutionOverhead") is not defined
        If IsNull(Environment("ExecutionOverhead")) Then
            Environment("ExecutionOverhead") = 0
        End If  
        Reporter.ReportEvent 4, "Load Action", "Load Action " & FunGetActionName & " " & intElapsedTime & " seconds." & vbCRLF &_
        "     Query database for file path to UFT Action: " & Environment("GetActionPath") & vbCRLF &_
        "     Load UFT Action: " & intElapsedTime - Environment("GetActionPath") & " seconds." & vbCRLF &_
        "     Automation framework overhead to load test data and UFT Actions: " & Environment("ExecutionOverhead") + intElapsedTime & " seconds."    
        'Add the intElapsedTime to the ExecutionOverhead so the running total (ExecutionOverhead) will carry forward.              
        Environment("ExecutionOverhead") = Environment("ExecutionOverhead") + intElapsedTime
        'Reporter.ReportEvent 4, "Execution Overhead", "Execution Overhead is the time to load data and call Actions for this test: " & Environment("ExecutionOverhead") & " seconds."
    On Error Goto 0
    '==================================================


    '==================================================
    'Initialize action once - includes loading data once
    Dim blnActionInitialized
    On Error Resume Next
        blnActionInitialized = Environment("blnActionInitialized") = Environment("ActionName")
    On Error Goto 0   
    If NOT blnActionInitialized Then
        Environment("blnActionInitialized") = True
        'Set environment value
        Environment("ActionInitialize") = Environment("ActionName")                                 
        
        'Capture test steps in environment variable
        On Error Resume Next
	        If Environment("strDesignStep") = "" Then
	        	Environment("strDesignStep") = ""
	        	Environment("strAllSteps") = ""
	        End If
        On Error Goto 0
        
        'Register User Functions               
        SubRegUserFunc(True)                 
        
        'Load Data for each action
        'Msgbox "Next step is to load data [" & Parameter("DATA_SCENARIO") & "]",vbOkOnly,"DATA LOAD - DEBUG ONLY"
        SubLoadTestData Parameter("DATA_SCENARIO")  'Load test data                                    
        'Msgbox "Data loaded [" & Parameter("DATA_SCENARIO") & "]",vbOkOnly,"DATA LOAD - DEBUG ONLY"
        'Process Carry Data Forward
        FunCDF(FunGetSheetNbr)
        
        'WebPackage: 2 - Runs mouse operations using the mouse
        'Setting.WebPackage("ReplayType") = 2
        'Normal - faster
        'Setting.WebPackage("ReplayType") = 1
        'Set App = Nothing
        
        'Disable Smart Identification programmatically        
        Dim App 'As Application
        Set App = CreateObject("QuickTest.Application")
        App.Test.Settings.Run.DisableSmartIdentification = True
		
		'Set image capture to always so that Perfect will save screenshots.
		'M means mobile and it is the first letter of the action.
		If uCase(Left(Environment("ActionName"), 1)) = "M" Then
			App.Options.Run.ImageCaptureForTestResults = "Always"
		Else
			App.Options.Run.ImageCaptureForTestResults = "OnWarning"
		End If
		
        'FunIsProcessRunning "java.exe"
        'SystemUtil.CloseProcessByName "java.exe"
    End If          
End Sub


'==================================================================================================
' Jim Sears - 04/06/2012
'--------------------------------------------------------------------------------------------------
'@Dynamically add Recovery Scenario to UFT test.
Sub SubAddRecoveryScenario(strScenarioFile, strScenarioName)
    Dim qtApp, qtTestRecovery, intIndex
    Set qtApp = CreateObject("QuickTest.Application")
    Set qtTestRecovery = qtApp.Test.Settings.Recovery
    
    'Set 'On Error' dialog to be next iteration and not display a Pop-up. While running a test from QC will not present a pop-up, QC goes to the next step instead. 
    'This settings forces UFT to go to the next iteration. Much faster

    If FunIsScriptReadOnly Then
        qtApp.Test.Settings.Run.OnError = "Stop" '"NextIteration"                         
        'Object Sync timeout
        qtApp.Test.Settings.Run.ObjectSyncTimeOut = 5000 'Miliseconds 20,000 = 20
    Else
        qtApp.Test.Settings.Run.OnError = "Dialog"
    End If

    'Test Settings Report log for debugging
    'Reporter.ReportEvent 4, "TEST SETTINGS", qtApp.Test.Settings.Run.OnError

    'This part of the code is used to remove all the existing recovery scenarios associated with the test
    If qtTestRecovery.Count > 0 Then
    qtTestRecovery.RemoveAll
    End If
    
    ' This is used to add the recovery scenarios. The first parameter is the location of the qrs file. 2nd parameter is the scenario name as given at the time of creating the recovery scenario and 3rd is the priority (used when multiplr scenarios need to be added. At that time we can have 1,2,3 etc)
    qtTestRecovery.Add strScenarioFile, strScenarioName, 1 '"E:\RecoveryScenario.qrs", "RecoveryScenario" , 1
    
    For intIndex = 1 To qtTestRecovery.Count
    	qtTestRecovery.Item(intIndex).Enabled = True
    Next
    qtTestRecovery.Enabled = True
    
    qtTestRecovery.SetActivationMode "OnError"
    Set qtApp = Nothing 
    Set qtTestRecovery = Nothing
    
    'Only if the below line of code is added the recovery scenario would be added to your code.
    Recovery.Enabled= True
End Sub

'==================================================================================================
' Jim Sears - 07/15/2015
'--------------------------------------------------------------------------------------------------
'@User Registered function for click to capture test steps for upload into ALM.
Sub SubClick(obj)
    Dim intReporter: intReporter = Reporter.Filter
    Reporter.Filter = 1
    
    WaitForPageLoader(20)
    
    'Exception handling to force test to stop when object not found
    If Not obj.Exist(20) Then            
        Reporter.Filter = 0
        Reporter.ReportEvent micFail, "SubClick - Object does not exist.", obj.ToString & " does not exist.", FunCaptureDesktopImageForTestResults
        'Exception handling to force test to stop when object not found        
        FunFailTest obj, "Click", obj.ToString , "Object does not exist"        
        ExitTest
    End If  
    Reporter.Filter = intReporter     
    SubReport "micDone", "Click: [" & obj.ToString & "].", "Click: [" & obj.ToString & "]."   		    
    obj.Click  
    
    WaitForPageLoader(20)
End Sub

'==================================================================================================
' Jim Sears - 07/15/2015
'--------------------------------------------------------------------------------------------------
'@User Registered function for click to capture test steps for upload into ALM.
Sub SubCloseAllTabs(obj)
    Dim intReporter: intReporter = Reporter.Filter
    Reporter.Filter = 1
    
    'Exception handling to force test to stop when object not found
    If Not obj.Exist(20) Then            
        Reporter.Filter = 0
        Reporter.ReportEvent micFail, "SubCloseAllTabs - Object does not exist.", obj.ToString & " does not exist.", FunCaptureDesktopImageForTestResults
        'Exception handling to force test to stop when object not found        
        FunFailTest obj, "CloseAllTabs", obj.ToString , "Object does not exist"        
        ExitTest
    End If  
    
    Reporter.Filter = intReporter 
    SubReport "micDone", "CloseAllTabs: [" & obj.ToString & "].", "CloseAllTabs: [" & obj.ToString & "]."        
    obj.CloseAllTabs  
End Sub


'==================================================================================================
' Jim Sears - 05/20/2016
'--------------------------------------------------------------------------------------------------
'@Close ALM Defect related to and created by Automation. Key value is Responsible = TAF
'--------------------------------------------------------------------------------------------------
Sub SubCloseALMDefect()		
	
	Dim oBugF 'As BugFactory
	Dim oBList 'As List   
	Dim oBug 'As Bug	
	Dim oBugLink 'As ILinkable
    Dim oLinkList 'As List
    Dim oLinkF 'As LinkFactory
    Dim oBugFactoryFilter
         
	'tdc is the global TDConnection object
    Set oBugF = QCUtil.QCConnection.BugFactory
    
    'bug filter
    Set oBugFactoryFilter = oBugF.Filter
    oBugFactoryFilter("BG_STATUS") = "NOT Closed"
    oBugFactoryFilter("BG_USER_11") = "NOT Closed"
    oBugFactoryFilter("BG_RESPONSIBLE") = "TAF"
    
    'For debugging a single defect
    'oBugFactoryFilter("BG_BUG_ID") = "2270"
    'create list
    Set oBList = oBugFactoryFilter.NewList     
    
    For Each oBug In oBList	
		'Cast the Bug object to an ILinkable reference to get the link factory.
        Set oBugLink = oBug
        Set oLinkF = oBugLink.LinkFactory
        'Get list of link entities
        Set oLinkList = oLinkF.NewList("")
       	
        'Update Defect status to Closed if Open Defect has linkes to tests that are ALL passed
        Dim intTestCaseLink
        Dim blnLinkedTestsAllPassed: blnLinkedTestsAllPassed = True
        If oLinkList.Count > 0 Then        
        	'Check Test Case execution status for all linked tests
    		For intTestCaseLink = 1 To oLinkList.Count Step 1
    			'If status is not Passed then don't close defect and exit loop
    			'Note - the link table is based on linking source to target. This code works because the defect (sourceEntity) is linked to a test case (targetEntity).
    			
    			Select Case oLinkList.Item(intTestCaseLink).TargetEntity.TypeName 
    				Case "TESTCYCL"
    					'linked to TestInstance 	    				
						If oLinkList.Item(intTestCaseLink).TargetEntity.Status <> "Passed" Then    			
					    	blnLinkedTestsAllPassed = False
					    	Exit For
					    End If						
    				Case "TEST"
    					'Linked to Test						
						If oLinkList.Item(intTestCaseLink).TargetEntity.ExecStatus <> "Passed" Then    			
					    	blnLinkedTestsAllPassed = False
					    	Exit For
					    End If
    				Case Else
    					Reporter.ReportEvent micFail, "Linked Entity to Defect known as TargetEntity is unknown and cannot be interpreted. Please review code in UFT Function file."
    			End Select
    		Next
    	    
    	    'Attempt to update Defect Status if all linked Test Cases are Passed
    	    If blnLinkedTestsAllPassed = True Then
				If NOT oBug.IsLocked Then        	    
	        		'If all linked tests are passed then close defect
	        		oBug.Status = "Closed"                
	        		'Custom field used by Toyota to say a defect is Closed/Open
	        		oBug.Field("BG_USER_11") = "Closed"
	        		oBug.Post
					SubReport "micInfo", "Defect closed [" & oBug.ID & "]","All linked Test Cases to this defect are Passed so the defect status was set to Closed."        	
					Wait 2
				Else
					SubReport "micInfo", "Defect [" & oBug.ID & "] is locked.", "All linked Test Cases to this defect are Passed but the defect cannot be modified at this time."        	
				End If
			End If

        End If  
        
        'Removed 03/09/2017 - Closing defects if test cases are all passed instead of removing linkage
        'If oLinkList.Count = 0 Then
        '	If NOT oBug.IsLocked Then
        '		oBug.Status = "Closed"                
        '		'Custom field used by Toyota to say a defect is Closed/Open
        '		oBug.Field("BG_USER_11") = "Closed"
        '		oBug.Post
		'		SubReport "micInfo", "Defect closed [" & oBug.ID & "]","No more links to this defect so the defect status was set to Closed."        	
		'		Wait 2
		'	Else
		'		SubReport "micInfo", "Defect [" & oBug.ID & "] is locked.", "No more links to this defect but the defect can not be modified at this time."        	
		'	End If
        'End If        
        
		Set oBugLink = Nothing
        Set oLinkF = Nothing
        Set oLinkList = Nothing
    Next
	'-----------------------------------
    
    
    '-----------------------------------
    'Clean up
    Set oBugF = Nothing
    Set oBugFactoryFilter = Nothing
    Set oBList = Nothing    
    Set oBugLink = Nothing    
    Set oLinkF = Nothing    
    Set oLinkList = Nothing    
    Set oBug = Nothing
End Sub

'==================================================================================================
' Jim Sears - 08/12/2011
'--------------------------------------------------------------------------------------------------
'@Create ALM Defect
Sub SubCreateALMDefect(BUG_SUMMARY, BUG_DESCRIPTION) 
    'Jim Sears (Capco) 07/01/2015
    'Create defect and link current running test or if defect exists then link test to existing defect with same BUG_SUMMARY details.
    '--------------------------
    
    
    '--------------------------
    'Don't create defects for tests run ad-hoc to temp results or to 'default' test set in ALM or if developer is running test.
    If Not FunIsLabPC Then Exit Sub
    If FunGetQCTestSetName = vbNullString Then Exit Sub
    If FunGetQCTestSetName = "default" Then Exit Sub
    '--------------------------
    
        
    '--------------------------
    'On Error Resume Next
    'Reporter.ReportEvent micDone, "SubCreateALMDefect", "Begin function to create ALM defect..."
    '--------------------------
    
    
    '--------------------------
    Dim objTest: Set objTest = QCUtil.CurrentTestSetTest
    Dim strResponsibleTester: strResponsibleTester = objTest.field("TS_RESPONSIBLE")

    'BUG_SUMMARY = "<html><body><font color=" & Chr(34) & "#000080" & Chr(34) & ">" & Error_Info & "</body></html>"
    'BUG_DESCRIPTION = Replace(Replace(Replace(Replace(Replace(Replace(Replace(BUG_DESCRIPTION,"<span>"," "),"</span>"," "),"<div align=" & Chr(34) & "left" & Chr(34) & ">"," "),"<br>"," "),"<b>"," "),"</b>"," "),vbCR," ") 
    'BUG_DESCRIPTION = Replace(Replace(Replace(Replace(Replace(Replace(Replace(BUG_DESCRIPTION,"<html>"," "),"<body>"," "),"<div align=" & Chr(34) & "left" & Chr(34) & ">"," "),"<br>"," "),"<b>"," "),"</b>"," "),vbCR," ") 
        
    'Find pre-exsiting defects with matching summary
    QCUtil.QCConnection.RefreshConnectionState
    Dim BugFactory: Set BugFactory = QCUtil.QCConnection.BugFactory
    Dim BugFactoryFilter: Set BugFactoryFilter = BugFactory.Filter
    'Replace carriage return or new lines with wild card so matches will occur correctly
    'Trim trailing space and add wild card to improve match results
    BugFactoryFilter("BG_SUMMARY") = Chr(34) & Replace(Trim(BUG_SUMMARY), vbCRLF, "*") & "*" & Chr(34)
    BugFactoryFilter("BG_STATUS") = "Open OR New"
    BugFactoryFilter("BG_RESPONSIBLE") = "TAF"
    
    'Limit duplicate defects for the current day.
    'BugFactoryFilter("BG_DETECTION_DATE") = Date
    
    'Create list of defects and apply filter 
    Dim bList: Set bList = BugFactoryFilter.NewList 
    Dim objBug, LinkFact, objLink, CUR_DESK
    
    'Add new defect if list of similar defects is 0 or update existing defect. 
    If bList.Count > 0 Then
        For Each objBug In bList
            If NOT objBug.IsLocked Then
                'Increase severity for every test case has the same issue to max of 5-Urgent
                Dim BG_SEVERITY: BG_SEVERITY = objBug.Field("BG_SEVERITY")
                objBug.Status = "New"
                objBug.field("BG_DETECTION_DATE") = Now
                objBug.field("BG_RESPONSIBLE") = "TAF" 'strResponsibleTester
                'Get current bug description and pre-pend new Error_Info to existing bug
                Dim CUR_DESC: CUR_DESC = objBug.field("BG_DESCRIPTION") 
                CUR_DESK = Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(Replace(CUR_DESC,"<body>",""),"<html>",""),"<\body>",""),"</span>",""),"</font>",""),"</div>",""), _
                    "<div align=" & Chr(34) & "left" & Chr(34) & "><font face=" & Chr(34) & "Arial" & Chr(34) & "><span style=" & Chr(34) & "font-size:8pt" & Chr(34) & ">",""),"</body>",""),"</html>",""),"<br />","")
				objBug.field("BG_DESCRIPTION") = BUG_DESCRIPTION & CUR_DESK
				'objBug.field("BG_DEV_COMMENTS") = COMMENTS                
                '---------------------------------------
                 
                
                '---------------------------------------
                'Link defect to Test if not already linked                
                Set LinkFact = objTest.BugLinkFactory 
                'Check for existing link
                Dim linkF 'As LinkFactory
			    Dim thelink 'As Link
			    Dim linkableBug 'As ILinkable
			     
			    Set linkableBug = objTest
			    Set linkF = linkableBug.BugLinkFactory
			 
			    Dim oList 'As IList
			    Dim aFilter 'As TDFilter
			    Set aFilter = linkF.Filter
			    
			    aFilter.Filter("LN_ENTITY_TYPE") = "TEST OR TESTCYCL"
			    aFilter.Filter("LN_BUG_ID") = objBug.ID
			    Set oList = linkF.NewList(aFilter.Text)
			    If oList.Count = 0 Then			    	         
	                'Add link
	                Set objLink = LinkFact.AddItem(objBug.ID)
	                objLink.LinkType = "Related"
	                objLink.CreatedBy = "TAF"
	                
                    'Set Severity of bug
                     Select Case BG_SEVERITY
                     	Case "1-Critical"
                            objBug.Field("BG_SEVERITY") = "1-Critical"
                     	Case "2-High"
                            objBug.Field("BG_SEVERITY") = "1-Critical"
                        Case "3-Meduim"    
                            objBug.Field("BG_SEVERITY") = "2-High"                                                                                                      
                        Case "4-Low"
                            objBug.Field("BG_SEVERITY") = "3-Meduim"
                        Case Else
                            objBug.Field("BG_SEVERITY") = "4-Low"
                    End Select
                    objBug.Post	 

					'Notify Responsible that the defect has reached highest level
			    	If objBug.Field("BG_SEVERITY") = "2-High" Then
			        	'QCUtil.QCConnection.SendMail "SearsJ;" & strResponsibleTester,,"Defect [" & objBug.Field("BG_BUG_ID") & "] has reached Severity " & objBug.Field("BG_SEVERITY"), _
			        	QCUtil.QCConnection.SendMail "SearsJ;" & strResponsibleTester,,"Defect [" & objBug.Field("BG_BUG_ID") & "] has reached Severity " & objBug.Field("BG_SEVERITY"), _
			        	    "QC Domain [" & QCUtil.QCConnection.DomainName & "] and Project [" & QCUtil.QCConnection.ProjectName & "]<br><br>" & _
			        	    "<a href=" & Chr(34) & "tds://" & QCUtil.QCConnection.ProjectName & "." & QCUtil.QCConnection.DomainName & ".tfsqualitycenter11.tfs.toyota.com/qcbin/DefectsModule-000000004243046514?EntityType=IBug&EntityID=" & objBug.Field("BG_BUG_ID") & Chr(34) & ">" & "Defect [" & objBug.Field("BG_BUG_ID")  & "]" & "</a>" & _
			        	    " has been automatically created for multiple tests having the same issue. Please investigate.<br><br>" &_
			        	    BUG_SUMMARY & "<br>" & BUG_DESCRIPTION,,"HTML"
			        End If
			        
			        SubReport "micInfo", "SubCreateALMDefect", "Existing Defect [" & objBug.ID & "] was linked to this test, [" & objTest.Name & "]"
				End If 'check if test is already linked to current defect. This if the test is rerun and an existing defect is alread linked.
				
				'Cleanup
				Set linkableBug = Nothing
			    Set linkF = Nothing
			    Set aFilter = Nothing
			    Set oList = Nothing
            End If            
        Next 
        
    Else
        'If no pre-existing bugs match summary then add new defect
        Set objBug = BugFactory.AddItem(null)
        objBug.Summary = BUG_SUMMARY
        objBug.Status = "New"
        objBug.field("BG_DETECTION_DATE") = Now
        objBug.field("BG_SEVERITY") = "4-Low"
        objBug.field("BG_RESPONSIBLE") = "TAF" 'strResponsibleTester
        objBug.field("BG_DESCRIPTION") = BUG_DESCRIPTION
        objBug.field("BG_DEV_COMMENTS") = BUG_SUMMARY
        '--------------------
        
        
        '--------------------
        'Toyota - Custom Defect fields
        Dim BG_USER_11, BG_PROJECT, BG_USER_03, BG_USER_04, BG_USER_01, BG_USER_15, BG_USER_06
        'Defect State
        objBug.field("BG_USER_11") = "Open"
        
        'Project
        'objBug.field("BG_PROJECT") = LOS - carlOS
        
        'Category
        'objBug.field("BG_USER_03") = 07-Design
                        
        'Testing Phase
        objBug.field("BG_USER_04") = "11-Regression"
        
        'Defect Status 
        objBug.field("BG_USER_01") = "Assigned"
        
        'Type
        objBug.field("BG_USER_15") = "1-Defect"
        
        'Person Responsible
        objBug.field("BG_USER_06") = strResponsibleTester
        '--------------------
        
        
        '--------------------
        objBug.Post        
        
        'Link defect to Test
        Set objTest = QCUtil.CurrentTestSetTest
        Set LinkFact = objTest.BugLinkFactory
        Set objLink = LinkFact.AddItem(objBug.ID)
        objLink.LinkType = "Related"
        objLink.CreatedBy = "TAF"
        objLink.Post   
        SubReport "micInfo", "SubCreateALMDefect", "New defect created [" & objBug.ID & "] linked to this test, [" & objTest.Name & "]"        
    End If
    '-----------------------------------
    
    
    '-----------------------------------
    'Reporter.ReportEvent micDone, "SubCreateALMDefect", "End Sub to create ALM defect [" & objBug.ID & "]"
    'Clean up
    Set objLink = Nothing
    Set LinkFact = Nothing
    Set objBug = Nothing
    Set bList = Nothing
    Set BugFactoryFilter = Nothing
    Set BugFactory = Nothing
    Set objTest = Nothing
    On Error Goto 0 
End Sub

'==================================================================================================
' Jim Sears - 08/12/2011
'--------------------------------------------------------------------------------------------------
'@Delete files from local file system.
Sub SubDeleteFiles(strDir)
    Dim intLastModified: intLastModified = 0 'Number of hours since the file was last modified.
    ' Create the File System Object
    Dim objFSO: Set objFSO = CreateObject("Scripting.FileSystemObject")
    Set objFSO = objFSO.GetFolder(strDir)
    Dim objFiles: Set objFiles = objFSO.Files
    Dim strFile, strFileName
    For each strFile in objFiles
    'TDOutput.Print strFile.Name
        'Delete temp file last modified time is older than the intLastModified value
        If DateDiff("h", cDate(strFile.DateLastModified), now) > intLastModified Then
           On Error Resume Next
           strFileName = strFile.Name
           strFile.delete
           If Err.Number = 0 Then
              'TDOutput.Print "Delete: " & strDir & "->" & strFileName
           Else
              'Reporter.ReportEvent micWarning, "Delete Failed:" & Err.Description, strDir & "->" & strFileName
              Err.Clear
           End If
           On Error Goto 0
        End If
    Next
    Set objFSO = Nothing
    Set objFiles = Nothing
End Sub

'==================================================================================================
' Jim Sears - 08/12/2011
'--------------------------------------------------------------------------------------------------
'@Delete folder from local file system.
'USAGE
'	Dim objShell: Set objShell = CreateObject("WScript.Shell")
'	Dim strDir: strDir = objShell.ExpandEnvironmentStrings("%appdata%") & "\Hewlett-Packard\UFT\Logs"
'	'Recursively call sub to iterate the sub folders and delete files
'	SubDeleteFolder(strDir)
'	'Delete files for first folder
'	SubDeleteFiles(strDir)
'	Set objShell = Nothing

Sub SubDeleteFolder(strDir)
    Dim objFSO: Set objFSO = CreateObject("Scripting.FileSystemObject")
    Dim objSubFolder: Set objSubFolder = objFSO.GetFolder(strDir)
    Dim arrFolders: Set arrFolders = objSubFolder.SubFolders
	Dim strFolder
	
    On Error Resume Next
       For Each strFolder in arrFolders
           '''TDOutput.Print "Call SubDeleteTemp->" & strFolder
           SubDeleteFolder(strFolder)
           '''TDOutput.Print "Delete files for " & strFolder  '.shortPath
           SubDeleteFiles(strFolder)

           If strFolder.Size = 0 Then
              Folder_Name = strFolder.Name
              strFolder.delete
              If Err.Number = 0 Then
                 'TDOutput.Print  "Delete folder: " & Folder_Name
              Else
                 Err.Clear
              End If
           End If
       Next
    On Error Goto 0

    Set objFSO = Nothing
    Set objSubFolder = Nothing
    Set arrFolders = Nothing
End Sub

'==================================================================================================
' Jim Sears - 08/12/2011
'--------------------------------------------------------------------------------------------------
'@Delete file from local file system.
Sub SubDeleteFile(strFilenameWithPath)
    Dim oFSO:Set oFSO = CreateObject("Scripting.FileSystemObject")
    ' Check if file exists to prevent error
	On Error Resume Next
    'If oFSO.FileExists(strFilenameWithPath) Then
        oFSO.DeleteFile strFilenameWithPath
        'Reporter.ReportEvent micDone, "Delete file", strFilenameWithPath  & " was deleted."
    'End If
    ' Clean Up
	On Error Goto 0
    Set oFSO = Nothing
End Sub

'==================================================================================================
' Jim Sears - 08/9/2011
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Data Drive automation with calls to external actions as they are listed in data table for each TEST_SCENARIO
'@Actions are loaded by each Test Case and then that test case calls this action.
Sub SubExecute  

	Setting("WebTimeout ")= "0"
	
    Dim intActionIndex, strActionName, strActionParm, strActionPath
    'SubUpdateLogFile ""
    'SubUpdateLogFile "Test " & Environment("TestName")
    'SubUpdateLogFile "SubExecute"
    '==================================================


    '==================================================
	'Remove UFT Logs prior to run
	'Dim objShell: Set objShell = CreateObject("WScript.Shell")
	'Dim strDir: strDir = objShell.ExpandEnvironmentStrings("%appdata%") & "\Hewlett-Packard\UFT\Logs"
	'Reporter micDone, "Deleting UFT Log files", "%appdata%\Roaming\Hewlett-Packard\UFT\Logs\*"
	''Recursively call sub to iterate the sub folders and delete files
	'SubDeleteFolder(strDir)
	''Delete files for first folder
	'SubDeleteFiles(strDir)
	'Set objShell = Nothing
	'==================================================
	
	
	'==================================================
    'Initialize test; includes Function to load test data
    SubTestInitialize()
    '==================================================
    

	'==================================================
    'Iterate through all action parameters on data sheet to run each action
    intActionIndex = 1
    Do While Len(Trim(DataTable("ACTION_" & intActionIndex , "TEST_SCENARIO"))) > 0
        strActionName = DataTable("ACTION_" & intActionIndex, "TEST_SCENARIO")
        strActionParm = DataTable("DATA_SCENARIO_" & intActionIndex, "TEST_SCENARIO")  
        '==================================================


        '==================================================
        'Run action
        On Error Resume Next                                  
            MercuryTimers("LOAD_ACTION").Start                                                                                 
            'Get path for action from Database
            strActionPath = FunGetActionPath(strActionName)
            'LoadAndRunAction "[QualityCenter] Subject\ARTS\RXCLAIM\ACTIONS\LOGIN_PCOM", "LOGIN_PCOM"                                       
            'LoadAndRunAction "[ALM] Subject\ARTS\RXCLAIM\ACTIONS\LOGIN_PCOM", "LOGIN_PCOM"                                       
            'SubUpdateLogFile "SubExecute-LoadAndRunAction " & strActionPath & "\" & strActionName            
			'SubReportBrowserMemoryUsage
            SubReport "micDone", "ACTION [" & strActionName & "]", "ACTION [" & strActionPath & "\" & strActionName & "]" 
            LoadAndRunAction strActionPath, strActionName, allIterations, strActionParm
            'Error handling
            If Err.Number <> 0 Then                                                                                               
                If Err.Number = 1000 Then
                    Reporter.ReportEvent micFail, "Error Number" & vbTab & "'" & Err.Number & "'" & vbCRLF & "Error description" & vbTab & "'" & Err.Description & "'", "Action Name" & vbTab & strActionName & vbCRLF & "Error Number: " & Err.Number & vbCRLF & "Error Desc: " & Err.Description & vbCRLF & "Path" & vbTab & strActionPath                                              
                Else
                    Reporter.ReportEvent micFail, "Error Number" & vbTab & "'" & Err.Number & "'" & vbCRLF & "Error description" & vbTab & "'" & Err.Description & "'", "Action Name" & vbTab & strActionName & vbCRLF & "Error Number: " & Err.Number & vbCRLF & "Error Desc: " & Err.Description 
                End If
                On Error Goto 0
                ExitTest (Err.Number) 'Exit on any error
            End If

			'Load Design Steps into ALM
	        SubLoadActionTestStepsToALMWithVersionControl strActionPath, strActionName
	        
	        Set qcTestPlanFolder = Nothing
	        Set objTest = Nothing
        On Error Goto 0
        '==================================================


        '==================================================
        'Increment to next parameter for next action
        intActionIndex = intActionIndex + 1
        'Exit this while loop if the no more Actions exist in the data table
        If NOT FunParameterExists("TEST_SCENARIO", "ACTION_" & intActionIndex) Then
            Exit Do
        End If
    Loop
    '==================================================


    '==================================================
    'Update ALM Tst description and steps only if test is run on Automation Lab
    'If uCase(Environment("UserName")) = "SRV_TAF_TST" OR uCase(Environment("UserName")) = "SEARSJ" Then    
    If FunIsLabPC Then		

		'Load Test Description in to ALM
        SubLoadTestDescriptionToALM()
        
        'Load Design Steps into ALM
        SubLoadTestStepsToALM()

		'Close Defect if no more linked Test Cases
		SubCloseALMDefect()
    End If
    
    'Total Execution Overhead as last statement in report
    Reporter.ReportEvent micInfo, "Execution Overhead", "Execution Overhead is the time to load data and call Actions for this test: " & Environment("ExecutionOverhead") & " seconds."    
End Sub

'==================================================================================================
' Jim Sears
' 4/7/11
' Fail test if recovery function is called
'--------------------------------------------------------------------------------------------------
'@Function to handle/process recovery scenario to report failure, clean-up desktop such as closing application for non-automation developers.
'@Includes reporting error detail via email, test results and updating "Comments" column in QC for this test set test run.
Function FunFailTest(Object, Method, Arguments, retVal)   
    Dim objProps, intPropsCount, strObjectList, strArgument, strBugDescription, strTestDescription, i, strAppError
    Dim objALM, strProject, strDomain, objCurrentTestSet, strTestSet, strResponsibleTester, strRunName, strClassPath
    '==================================================


    '==================================================                          
    'Add Function file version to Test Results              
    Reporter.ReportEvent 4, "Function Library Version", FunGetFileProperties(FunGetResourcePath("FUNCTIONS.vbs") & "\FUNCTIONS.vbs", "DateLastModified")
    '==================================================


    '==================================================
    '____Test Details From QC____
    On Error Resume Next
        Set objALM = QCUtil.QCConnection
        strProject = objALM.ProjectName
        strDomain = objALM.DomainName                            
        Set objCurrentTestSet = QCUtil.CurrentTestSet
        strTestSet = objCurrentTestSet.Name                                   
        strResponsibleTester = QCUtil.CurrentTest.Field("TS_RESPONSIBLE")
        strRunName = QCUtil.CurrentRun.Field("RN_RUN_NAME")
    
        'strTestDescription = "PROJECT: " & strProject & vbCRLF & "DOMAIN: " & strDomain & vbCRLF & _
        '"TEST SET: " & strTestSet & vbCRLF &  "TEST: " & Environment("TestName") & vbCRLF & "ACTION: " & Environment("ActionName") & vbCRLF & _
        '"RESPONSIBLE TESTER: " & strResponsibleTester & vbCRLF & "RUN: " & strRunName & vbCRLF & "HOST: " & Environment("LocalHostName") & vbCRLF & _
        '"EXECUTING TESTER: " & Environment("UserName") & vbCRLF & vbCRLF
        
        strTestDescription = "ACTION: " & FunGetActionName & vbCRLF & "TEST: " & Environment("TestName") & vbCRLF & _
        "TEST SET: " & strTestSet & vbCRLF & "RESPONSIBLE TESTER: " & strResponsibleTester & vbCRLF & _
        "RUN: " & strRunName & vbCRLF & "HOST: " & Environment("LocalHostName") & vbCRLF & _
        "EXECUTING TESTER: " & Environment("UserName") & vbCRLF & "PROJECT: " & strProject & vbCRLF & "DOMAIN: " & strDomain & vbCRLF & vbCRLF
    On Error Goto 0
    '==================================================


    '==================================================
    'Get error details from the four parameters - Object, Method, Arguments, retVal
       '____Object_______________________________________________________________
    Set objProps = Object.GetTOProperties 
    intPropsCount = objProps.Count
    For i = 0 To intPropsCount - 1      
        strObjectList = strObjectList & objProps(i).Name & "=" & objProps(i).Value & "; " 
    Next 
    If Right(strObjectList, 2) = "; " Then 'Remove trailing semi-colon
        strObjectList = Left(strObjectList, Len(strObjectList) - 2)
    End If
   '____Method________________________________________________________________
    If Method = vbNullString Then
        Method = "NONE"          
    End If
    '____Arguments____________________________________________________________
    On Error Resume Next
        If varType(Arguments) = vbString Then
            strArgument = Arguments
        End If
        If varType(Arguments) = vbArray Then
            For i = 0 to uBound(Arguments) 'Build string of arguments                                                           
                strArgument = strArgument & cStr(Arguments(i)) &"; "
            Next 
            If strArgument = vbNullString Then
                strArgument = "NONE"
            Else
                strArgument = Left(strArgument , Len(strArgument) - 2) 'Remove trailing semicolon 
            End If
        End If
        
        'Error Reporting
        If Err.Number <> 0 Then
        	SubSendMail "Jim.Sears", vbNullString, "FunFailTest", "Function encountered an error while attempting to get arguments from failed test step.<p>" & Err.Description,,"HTML"
        End If
    On Error Goto 0    
    '____retVal____________________________________________________________
    If retVal = vbNullString Then
        retVal = "NONE"
    Else                        
        Select Case retVal 'Manually define detail description for error numbers.
        Case "-2147220983"                                                        
            strClassPath = Object.GetROProperty("class_path")
            If InStr(strClassPath, "swing") > 0  Then 
                'JAVA select list                                                                 
                For i = 0 to Int(Object.Object.GetModel.GetSize) - 1
                    strAllItems = strAllItems & Object.Object.getModel.getElementAt(i).toString & "; "
                Next      
                retVal = "Item: " & strArgument & " not found in list. List: " & strAllItems
            Else
                'Web select list
                retVal = "Item: " & strArgument & " not found in list. List: " & Object.GetROProperty("all items")
            End If                    
        Case "-2147024809"                                                        
            retVal = "The parameter is incorrect. Please verify the data length does not exceed the field size."                                                    
        Case "-2147220984"
            retVal = "Object is disabled." & " Property list: " & strObjectList
        Case "-2147220987"
            retVal = "Object not visible." & " Property list: " & strObjectList              
        Case "-2147220990"                                                        
            retVal = "Cannot identify the object." & " Property list: " & strObjectList
        Case "-2147467259"
            retVal = "Unspecified error."   
        Case "Object does not exist See report results for detail."            
            retVal = "Object does not exist. See report results for detail."
        Case Else   
            retVal = retVal & " See report results for detail. "            
        End Select
    End If
    '==================================================


    '==================================================
    'Create description based on run time error that can be used to search for pre-existing defects with the same run time error. (Instead of creating new defects for the same issue, link additional tests to ONE defect.)
    strBugDescription =  "RETURN VALUE: " & retVal & " " & vbCRLF & "OBJECT: " & Object.ToString & " " & vbCRLF & "METHOD: " & Method & " " & vbCRLF & "ARGUMENTS: " & strArgument 
    '==================================================


    '==================================================
    'Send attachment with email
    Dim strFilePath:strFilePath = FunCaptureDesktopImageForTestResults() 
'    Dim BugFact, theBug, attachFact, theAttachment, AttachmentList(0)  ', attachList
'    
'    'Use Bug Factory to create instance of attachment factory object
'    Set BugFact = QCUtil.QCConnection.BugFactory
'    'Set theBug = BugFact.Item(1) 
'    Set theBug = BugFact.AddItem(Null)
'    Set attachFact = theBug.Attachments
'    theBug.Post
'                
'    'Create attachment object for screenshot file
'    Set theAttachment = attachFact.AddItem(Null)
'        theAttachment.FileName = strFilePath
'        theAttachment.Type = 1 'Attach file type is 'file'
'        'theAttachment.Post
'
'    'Create new list of attachment objects
'    'Set attachList = attachFact.NewList("")
'    'ReDim Preserve AttachmentList(0)
'    AttachmentList(0) = theAttachment.ServerFileName'    
'    SubSendMail "Jim.Sears;Scott.Dachishen", vbNullString, strBugDescription, strBugDescription & vbCRLF & strTestDescription, AttachmentList, "HTML"
'    BugFact.RemoveItem(theBug.ID)
'    Set theAttachment = Nothing
'    Set attachFact = Nothing
'    Set theBug = Nothing
'    Set BugFact = Nothing
    '==================================================
    
    
    '==================================================
    'Email Automation team with defect details
    'SubSendMail "Jim.Sears;Scott.Dachishen", vbNullString, strBugDescription, strBugDescription & vbCRLF & strTestDescription, , "HTML"
    '==================================================
    
    
    '==================================================
    'Create Defect and link to the current running, failed test
    SubCreateALMDefect strBugDescription, strTestDescription
    '==================================================  
    

    '==================================================
    '____REPORT____
    'Report Application error, UFT error, and Test Details
    Dim strTestSteps, arrNewTestStepDesc    
    '==================================================


    '==================================================                                                          
    'Save screen shot to test results so tester can easilty see the state of the app during the error.
    '''''SubSaveAttachmentToCurrentTestResults strFilePath, strAppError & strBugDescription & strTestDescription            
    '==================================================


    '==================================================
    'Add bug details to report results              
    'Environment("strDesignStep") = "No Steps are being captured at this time by automation." & vbCRLF 
    Reporter.ReportEvent micFail, "ERROR DETAILS->", strAppError & strBugDescription & vbCRLF & strTestDescription, strFilePath
    arrNewTestStepDesc = Split(Environment("strDesignStep"), vbCRLF) 
    For i = 0 To uBound(arrNewTestStepDesc)
        strTestSteps = strTestSteps & arrNewTestStepDesc(i) & vbCRLF 
    Next      
    Reporter.ReportEvent micFail, "TEST STEPS->", strTestSteps 
    '==================================================


    '==================================================
    'Post error message to first step in run results so user doesn't have to navigate results to find error
    On Error Resume Next         
        Dim objStepFact, arrStepList, objStep, strCurrentError  
        Set objStepFact = QCUtil.CurrentRun.StepFactory
        Set arrStepList = objStepFact.NewList(vbNullString)
        If arrStepList.Count > 0 Then
            Set objStep = arrStepList.Item(1)
        Else
            Set objStep = objStepFact.AddItem(Null)
        End If
        '==================================================
    
    
        '==================================================
        'Debug; lists all the fields for a step and the value for that step.
        'For i = 1 to arrStepList.Fields.Count
        '    Print arrStepList.Fields(i).Property.DBTableName & ", " & arrStepList.Fields(i).Property.DBColumnName & ", " & arrStepList.Fields(i).Property.DBColumnType & ", " & arrStepList.Fields(i).Property
        'Next
        '==================================================
    
    
        '==================================================          
        'Add new error to existing error
        Dim strCurrentStepDescription: strCurrentStepDescription = objStep.Field("ST_DESCRIPTION")                
        objStep.Field("ST_STEP_NAME") = "ERROR DETAILS-->"               
        objStep.Field("ST_DESCRIPTION")= 0 & strBugDescription & vbCRLF & strTestDescription & "____________________________________________________" & vbCRLF & strCurrentStepDescription
        objStep.Field("ST_STATUS") = "Failed"
        objStep.Post
        Set objStep = Nothing
        Set arrStepList = Nothing
        Set objStepFact = Nothing                   
    On Error Goto 0

    
    '____QC Comments column____
    'Comments column is included in scheduled automation email so that email will have some details as to why the test failed.
    If strAppError <> vbNullString Then
        SubUpdateTestSetTestComments(strAppError) 'App error takes precedence when reporting failures in emails
    Else
        SubUpdateTestSetTestComments(strBugDescription) 'UFT errors in case no app error was detected
    End If  
    '==================================================


    '==================================================
	'Get browser memory at time of crash
    'SubReportBrowserMemoryUsage
	'==================================================
	
	
	'==================================================
    'Close Apps when not executed by automation developer and test fails
    If FunIsLabPC() Then
        SystemUtil.CloseProcessByName "iexplore.exe"
        SystemUtil.CloseProcessByName "chrome.exe"
		SystemUtil.CloseProcessByName "iexplore.exe"
		SystemUtil.CloseProcessByName "iexplore.exe"
		SystemUtil.CloseProcessByName "chrome.exe"
        
        'Reboot PC if Test Fails
        Reporter.ReportEvent micFail, "Reboot PC due to failed Test Case", "PC " & Environment("LocalHostName") & " is rebooting in 20 seconds."		
		Dim oShell
		Set oShell = CreateObject ("WSCript.shell")
		oShell.run "cmd /C c:\windows\system32\shutdown.EXE /f /r /t 20 /d p:4:1"
		Set oShell = Nothing 
		
		' SystemUtil.CloseProcessByName "javaw.exe"       
		'  SystemUtil.CloseProcessByName "qikDesktop.exe"       
    End If                   
    '==================================================


    '==================================================
    Set objStep = Nothing
    Set arrStepList = Nothing
    Set objStepFact = Nothing
    Set arrNewTestStepDesc = Nothing
    Set objCurrentTestSet = Nothing
    Set objALM = Nothing
    Set objProps = Nothing
    Set Arguments = Nothing
    Set Object = Nothing
    '==================================================


    '==================================================
    'Change Application settings to stop the Test on Error
'    Dim qtApp, qtTestRecovery, intIndex
'    Set qtApp = CreateObject("QuickTest.Application")        
'    qtApp.Test.Settings.Run.OnError = "Stop" 
    'Reporter.ReportEvent micDone, "UFT Application Settings","UFT Run: STOP test execution on error."
'    Set qtApp = Nothing
    
    'Stop Test bc recovery scenario isn't always working    
    ExitTest
End Function

'==================================================================================================
' Jim Sears - 04/18/2012
'--------------------------------------------------------------------------------------------------
'@Load test data from data source into current action data table
Public Sub SubLoadUFTSettings
    'Load UFT System setting files, Not needed if UFT is configured correctly but just in case UFT isn't, these files will setup everything.
    On Error Resume Next 'Loading files is not supported so the load works but generates an error message so wrapping with On Error suppresses the error.    
        'Test Settings (File\Settings)
        ExecuteFile "[QualityCenter\Resources] Resources\ARTS\TestSettings*"

        'Object recognition properties based on Add-in. (Tools\Object Identification)
        Select Case FunGetUFTTestAddIn
            Case "Terminal Emulators"                             'Object Identification for TE
                ExecuteFile "[QualityCenter\Resources] Resources\ARTS\ObjectIdentificationTE*"
            Case "Web"                        'Object Identification for Web
    
            End Select
    On Error Goto 0
End Sub                

'==================================================================================================
' Jim Sears - 08/11/2011
'--------------------------------------------------------------------------------------------------
'@Load test data from data source into current QTP action data table
Public Sub SubLoadTestData(strDataScenario)    
    Dim strFileName, strExcelDataFile, strSheetTab
    Dim objConnection, objRecordSet, strSQL, rc, i, intElapsedTime
    Dim intSheetNbr:intSheetNbr = FunGetSheetNbr 'Reference sheet by number is faster than reference by name
    Dim objDataSheet:Set objDataSheet = DataTable.GetSheet(intSheetNbr)  'Create reference to data sheet for performance                     
    '==================================================
    
    
    '==================================================
    'If DATA_SCENARIO is UNDEFINED then load the DEBUG row of data from the data source.
    'This is to load the data the developer can use during script development 
    If strDataScenario = "UNDEFINED" Then
        strDataScenario = "_DEBUG"
        SubLoadTestData(strDataScenario) 'Load developer data row using recursion (call this same function again but pass 'DEBUG' as the parameter.)
        Exit Sub
    End If
    'SubUpdateLogFile "SubLoadTestData (Start)" & environment("ActionName") & ": " & strDataScenario
    '==================================================


    '==================================================          
    'Performance monitor Start 
    MercuryTimers("LOAD_DATA").Start 
    '==================================================


    '==================================================                          
       'Get name of action without [ symbol because Excel data file sheet names won't have brackets.
       strSheetTab = Environment("ActionName")
    If InStr(strSheetTab, "[") Then
        strSheetTab = Left(strSheetTab, InStr(strSheetTab," [")-1)                           
    End If      
    '==================================================


    '==================================================          
    'The TEST_SCENARIO action uses only the test id for the DATA_SCENARIO. The id is the 4 or 5 digit number given to a test by ALM and is the begining of each test name.
    'If strSheetTab = "TEST_SCENARIO" Then
    '    strDataScenario = Left(strDataScenario, InStr(strDataScenario, "-"))                         
    'End If
    '==================================================


    '================================================== 
    'Connect to DATA SOURCE and populate DATA TABLE
    Const adCursorType = 3  'http://www.w3schools.com/ADO/met_rs_open.asp#CursorTypeEnum
    Const adLockType = 3  'http://www.w3schools.com/ADO/met_rs_open.asp#LockTypeEnum
    Const adCmdType = &H0001
    Set objConnection = Nothing
    Set objRecordSet = Nothing
    Set objConnection = CreateObject("ADODB.Connection")
    Set objRecordSet = CreateObject("ADODB.Recordset")
    '==================================================


    '==================================================
    'The % is a wild card character so multiple rows could load but it is a problem bc it is too complicated to make sure row names are unique for each test. May have to consider a query that matches when only the last character is a number.                                
    'strSQL = "select * from [" & strSheetTab & "$] where DATA_SCENARIO LIKE '" & strDataScenario & "[012345679][012345689]'" & " OR DATA_SCENARIO = '" & strDataScenario & "' OR DATA_SCENARIO LIKE '" & strDataScenario & "[012345679]'"    
    'strSQL = "SELECT * FROM " & strSheetTab & " WHERE DATA_SCENARIO LIKE '" & strDataScenario & "%'"                
    strSQL = "SELECT * FROM " & strSheetTab & " WHERE DATA_SCENARIO LIKE '" & strDataScenario & "'"       
    '==================================================


    '==================================================
    'MySQL connection    
    Dim strCnxn, strDbHost
    'Environment("ArtsTestDataFilePath")
    'If strDbHost = vbNullString Then strDbHost = "Z:\DATA\ARTS.accdb"
    'strCnxn = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};Dbq=" & strDbHost & ";"
    'strCnxn = "Provider=MSDASQL; Driver={MySQL ODBC 5.3 ANSI Driver};Server=10.49.56.84;Port=3306;Database=TAF;User=ReadOnly;PWD=Auto6701;Option=3;"
	strCnxn = "Provider=MSDASQL; Driver={MySQL ODBC 5.3 ANSI Driver};Server=td9723826.tfs.toyota.com;Port=3306;Database=" & FunGetDB & ";User=ReadOnly;PWD=Auto6701;Option=3;"
    If objConnection is nothing then 
        objConnection.Open (strCnxn)
    End If
    If objConnection.State = 0  Then 
        objConnection.Open (strCnxn)    
    End If
    '==================================================                                                          
    

    '==================================================                                                          
    'MySql query - Execute query and populate result set       
	objRecordset.Open strSQL, objConnection, adCursorType, adLockType, adCmdType
    '==================================================

  
    '==================================================   
    'Error handling for empty record set (no data returned from SQL query)
    If objRecordset.BOF AND objRecordset.EOF Then
        Reporter.ReportEvent micFail, "Data not found for [" & strDataScenario & "]",  "No data rows found for table: '" & strSheetTab & "' with data scenario: '" & strDataScenario & "'." & vbCRLF & "[" & strSQL & "]" & vbCRLF & "Please review data scenario name for typos."                         
        ExitTestIteration
    End If
    '==================================================


    '==================================================
    'Update last run run date/time for data scenario on table so obsolete records can be deleted or archived
    'Table = the strSheetTab(TEST_SCENARIO or ACTION name)
    'Row = DATA_SCENARIO
    objRecordset("LAST_RUN") = Now()
    On Error Resume Next
        objRecordSet.Update
        If Err.Number <> 0 Then
            objRecordSet.CancelUpdate
            Reporter.ReportEvent micWarning, "Function FunLoadTestData", "Failed to update LAST_RUN field for data row for [" & strDataScenario & "]. Please contact Automation Support for assistance." & vbCRLF & vbCRLF & "Error: " & Err.Description
        End If
    On Error Goto 0
    '==================================================


    '==================================================
    'Garbage Clean Up On Error
    If Err.Number <> 0 Then
        'Clean up
        objRecordset.Close
        Set objRecordSet = Nothing
        objConnection.Close
        Set objConnection = Nothing
        Set objDataSheet = Nothing       
        Exit Sub 'TestExit command will not work and will hang the script with 'error in function file'.
    End If
    '==================================================
    

    '==================================================          
    'Add first row with column names from query result to UFT data table.
    objRecordset.MoveFirst           
    If NOT FunParameterExists(intSheetNbr, objRecordset(0).Name) Then
        For i = 0 to objRecordset.fields.count-1                                                                                  
            'FYI - Error on this step related to -2147217887 - "You cannot record your changes because a value you entered violates the settings defined for this table or list (for example, a value is less than the minimum or greater than the maximum).  Correct the error and try again."
            'This error is because the column format is general and not text. Select column or spreadsheet in Excel and Format the number type to 'TEXT'.
            'This error only occurs when using the double semi-colon in the cell.                       
            'objDataSheet.AddParameter objRecordset.Fields(i).Name, objRecordset.Fields(i).Value  'Add column name and data value to sheet                                                   
            objDataSheet.AddParameter objRecordset(i).Name, objRecordset(i).Value  'Add column name and data value to sheet                                                        
        Next      
    Else
        For i=0 to objRecordset.fields.count-1 'Column name already exists so just add value to sheet
            'DataTable.Value(objRecordset.fields(i).Name, objDataSheet.Name) =  objRecordset.fields(i).Value
            DataTable.Value(i+1, intSheetNbr) =  objRecordset.fields(i).Value                                                           
        Next  
    End If
    'Add rows 2 and up         
    Dim intRow:intRow = 1
    objRecordset.MoveNext
    Do Until objRecordset.EOF                                          
        intRow = intRow + 1
        objDataSheet.SetCurrentRow intRow 'SetCurrentRow objRecordset.AbsolutePosition 'Set table row                                     
        For i=0 to objRecordset.fields.count-1 'Column name already exists so just add value to sheet
            'DataTable.Value(objRecordset.fields(i).Name, objDataSheet.Name) =  objRecordset.fields(i).Value
            DataTable.Value(i+1, intSheetNbr) =  objRecordset.fields(i).Value                                                           
        Next   
        objRecordset.MoveNext                                             
    Loop
    '==================================================


    '==================================================
    'Performance monitor End
    MercuryTimers("LOAD_DATA").Stop 
    intElapsedTime = MercuryTimers("LOAD_DATA").ElapsedTime / 1000    
    Environment("ExecutionOverhead") = Environment("ExecutionOverhead") + intElapsedTime    
    Reporter.ReportEvent 4, "Data Load", strSheetTab & "(" & strDataScenario & ") " & intElapsedTime & " seconds."  & vbCRLF &_
    "                Execution Overhead is the time to load data and call Actions for this test: " & Environment("ExecutionOverhead") & " seconds."       
    '==================================================


    '==================================================    
    'Set row back to first row so execution will begin at row 1
    objDataSheet.SetCurrentRow 1
    '==================================================


    '==================================================
    'Clean up
    objRecordset.Close
    Set objRecordSet = Nothing
    objConnection.Close
    Set objConnection = Nothing
    Set objDataSheet = Nothing
    'SubUpdateLogFile "SubLoadTestData (End)" & environment("ActionName") & ": " & strDataScenario
    '==================================================


    '==================================================          
    'Create Test Description by collecting the 'NOTES' column from the datatable for each DATA_SCENARIO. Then at the end of the test, replace the test description with the NOTES text.    
    If Left(strDataScenario,1) = "_" Then
        strDataScenario = Replace(strDataScenario, "_", vbNullString)
    End If 
    '==================================================


    '==================================================          
    'UFT is crashing and root cause is unknown. Commmented on 8/25/2015
    SubSaveTestDescription("<html><body><b>" & strSheetTab & "</b><font color=" & Chr(34) & "#008080" & Chr(34) & ">(" & strDataScenario & "): </font><br><font color=" & Chr(34) & "#000080" & Chr(34) & ">" & DataTable("NOTES", Environment("ActionName")) & "<br></font></body></html>")
End Sub

'==================================================================================================
' Jim Sears - 08/23/2011
'--------------------------------------------------------------------------------------------------
'@Updates QC Test description with NOTES text for each DATA_SCENARIO that was executed at run time.
Sub SubLoadTestDescriptionToALMWithVersionControl()
    '==============================================
    'Load Test Description for QC Tests only
    If Not FunALMConnected Then Exit Sub
    '==============================================


    '==============================================
    'Check test status and only add steps to QC for Tests in 'Ready' status
    Dim objTest:Set objTest = QCUtil.CurrentTest
    'If objTest.Field("TS_STATUS") <> "Ready" Then
    '    Set objTest = Nothing
    '    Exit Sub
    'End If    
    '==============================================


    '==============================================
    'Load steps only if test passed and executing user is scheduled automation ID.
    'If FunGetQCExecutingTesterName <> ARTS() Then 
       'Exit Function
    'End If  
    If Reporter.RunStatus <> micPass AND Reporter.RunStatus <> micWarning Then
        Exit Sub
    End If    
    '==============================================


    '==============================================
    'Abort sub if test description is unchanged
    If objTest.Field("TS_DESCRIPTION") = "<html><body>" & Environment("strDataScenarioNotes") & "</body></html>" Then
        Reporter.ReportEvent micDone, "FunLoadTestDescription", "Test description is current."
        Exit Sub
    End If
    '==============================================
    

    '==============================================
    'Update Test Description - Uses version control.    
    'On Error Resume Next
        Dim blnLockTest, blnCheckIn, objTestVCS
        'UnLock Test (if possible)
        'If objTest.IsLocked Then
        '    objTest.UnLockObject
        '    If objTest.IsLocked = True Then
        '        Exit Sub
        '    Else
        '        blnLockTest = True
        '    End If            
        'End If
        
        'Checkout Test
        Set objTestVCS = objTest.VCS
        If NOT objTestVCS.IsCheckedout Then            
            If FunCheckoutTest(objTest, "Load test description", False) Then
                blnCheckIn = True
            End If
        End If
                
        'If uCase(objTestVCS.LockedBy) = uCase(QCUtil.QCConnection.UserName) AND objTestVCS.IsCheckedOut Then
        If objTestVCS.IsCheckedOut Then
            'Compare current test description to new description but remove reference to Environment. If description is same then don't update.
            'If environment reference wasn't removed then the test description would be updated everytime the test ran in two different environments or date/time dependant input values.
            Reporter.ReportEvent 4, "Test Description", Environment("strDataScenarioNotes")
            If objTest.Field("TS_DESCRIPTION") <> "<html><body>" & Environment("strDataScenarioNotes") & "</body></html>" Then
                Reporter.ReportEvent 4, "FunLoadTestDescription", "Test description was updated." & vbCRLF & Environment("strDataScenarioNotes")
                objTest.Field("TS_DESCRIPTION") = "<html><body>" & Environment("strDataScenarioNotes") & "</body></html>"
                objTest.Post                
            Else
                Reporter.ReportEvent micDone, "SubLoadTestDescriptionToALM", "Test description is current."
            End If
        Else
            Reporter.ReportEvent micDone, "SubLoadTestDescriptionToALM", "Test is locked or checked out and can not be updated at this time."
        End If
        
        'Checkin Test if test was checked out by this function
        If blnCheckIn Then
            FunCheckinTest objTest, "Load test description"
        End If
        'Lock test back if this function unlocked it.
        'If blnLockTest Then            
        '    objTest.LockObject 'Locked by QC user executing test
        'End If                                    
        Set objTest = Nothing
        '==============================================
    
    
        '==============================================
        'Error Handling
        If Err.Number <> 0 Then
            SubSendMail "Jim.Sears", "Jim.Sears", "SubLoadTestDescriptionToALM", "Function encountered an error while updating Test Description in QC." & "<p>Error [" & Err.Number & ":" & Err.Description & "]<p>" & Environment("strDataScenarioNotes"),,"HTML"
        End If
    On Error Goto 0                
End Sub

'==================================================================================================
' Jim Sears - Ported over from Transplace (02/04/2016)
' User defined function to call function  to load Design Steps into ALM Test Plan for current running test; with or without version control enabled.
'--------------------------------------------------------------------------------------------------
Function SubLoadTestDescriptionToALM() 
	'Check if version control is turned on/off
    On Error Resume Next
    
    'vcsEnabled = True
    If QCUtil.QCConnection.ProjectProperties.IsParam("VCS") Then        
        SubLoadTestDescriptionToALMWithVersionControl 
    Else
    	SubLoadTestDescriptionToALMWithOutVersionControl        
    End If	
End Function

'==================================================================================================
' Jim Sears - Ported over from Transplace (02/04/2016)
' User defined function to call function  to load Design Steps into ALM Test Plan for current running test; with or without version control enabled.
'--------------------------------------------------------------------------------------------------
Function SubLoadTestStepsToALM() 
	'Check if version control is turned on/off
    On Error Resume Next
    
    'vcsEnabled = True
    If QCUtil.QCConnection.ProjectProperties.IsParam("VCS") Then    
        SubLoadTestStepsToALMWithVersionControl
    Else    	
        SubLoadTestStepsToALMWithOutVersionControl
    End If	
End Function

'==================================================================================================
' Jim Sears - Ported over from Transplace (11/20/2012)
' User defined function to load Design Steps into ALM Test Plan for current running test
'Enhanced to update Test Steps for the ACTION of a test so that step count can be captured and reported on for ACTION complexity
'--------------------------------------------------------------------------------------------------
Function SubLoadActionTestStepsToALMWithVersionControl(strActionPath, strActionName)      
    'Exit if test is not run from ALM
    If FunALMConnected() AND FunIsLabPC Then
        If QCUtil.CurrentRun Is Nothing Then
            Exit Function
        End If
    Else
        Exit Function
    End If
    '==============================================
	
	
	'==============================================
    'Load steps only if test passed and executing user is qualitycenter and test is executed on the first of each month        
    If Reporter.RunStatus <> 0 AND Reporter.RunStatus <> 3 Then
        Select Case Reporter.RunStatus
            Case 1
                Reporter.ReportEvent micDone, "Design Steps", "Design Steps not updated becuase the test did not pass. Status: 'Fail'"
            Case 2
                Reporter.ReportEvent micDone, "Design Steps", "Design Steps not updated. Status: 'Done'. Please add checkpoints to verify test passed or failed."
            Case 3
                Reporter.ReportEvent micDone, "Design Steps", "Design Steps not updated. Status: 'Warning'. Test completed but encountered a warning. Please review test results."
        End Select   

		'Provide Steps in report for reference only - these steps are not added to Test Plan
	    'Reporter.ReportEvent micDone, "Design Steps", Environment("strDesignStep") 
    
        Exit Function
    Else
        'Reporter.ReportEvent micDone, "Load Design Steps", "Test status: 'Pass'"
    End If    
    '==============================================
    
    
    '==============================================
    'Get Test from QC folder as object so ACTION steps can be updated in QC
    Dim qcTestPlanFolder: Set qcTestPlanFolder = qcGetTestPlanFolderFromPath(strActionPath)
    Dim objTest: Set objTest = qcFindTestInFolder(qcTestPlanFolder, strActionName)
    '==============================================
        
    
    '==============================================
    'Existing steps  
    Dim objStepFact, lstCurrentSteps, i, aStep, Current_StepList_for_email, Current_AllSteps     
    'Set objStepFact = QCUtil.CurrentTest.DesignStepFactory
    Set objStepFact = objTest.DesignStepFactory
    Set lstCurrentSteps = objStepFact.NewList("")    
    For i = 1 To lstCurrentSteps.Count 'Create list of steps such as Set, Click for comparison to existing steps. Comparing data will always be different so we are just looking at steps.
        aStep = lstCurrentSteps.Item(i).StepDescription
        Current_StepList_for_email = Current_StepList_for_email & aStep & vbCRLF &  "<br>"
        If InStr(aStep, ":") > 0 AND aStep <> vbNullString Then
            aStep = Left(aStep, InStr(aStep, ":") - 1)
            Current_AllSteps = Current_AllSteps & aStep & vbCRLF
        Else
            Current_AllSteps = "Needs updating"
            Reporter.ReportEvent micDone, "Current ALM step count doesn't match test step count.", "Current ALM step count doesn't match test step count."
        End If
    Next
    '==============================================
    
    
    '==============================================
    'Create list of steps with only the Click, Set, Select, etc. for comparison and don't look at the data values passed. Otherwise tests would require updating more frequently because data values change (time, date, generated numbers).
    Dim newTestStepDesc, aNewStepList_for_email, New_aStep, New_AllSteps
    newTestStepDesc = Split(Environment("strDesignStep"), vbCRLF) 
    For i = 0 to uBound(newTestStepDesc)
    	'Only capture the steps for this ACTION    	    
        If InStr(newTestStepDesc(i), "[" & strActionName & "]") > 0 Then                                        
        	aNewStepList_for_email = aNewStepList_for_email & newTestStepDesc(i) & vbCRLF & "<br>"
			If InStr(newTestStepDesc(i),":") = 0 Then 'New Design step when ":" is missing
				Reporter.Report micFail, "Test step is missing crucial ':' symbol in test test. Test Steps can not be captured without the colon.", "Please see automation for assistance."
			Else
				New_aStep = Left(newTestStepDesc(i),InStr(newTestStepDesc(i),":") - 1) 'New Design step must have a ':' in the desc or an error will occur.
				New_AllSteps = New_AllSteps & New_aStep & vbCRLF
			End If
        End If        
    Next    
    '==============================================
    
    
    '==============================================
    'Compare - if new and old steps are same then exit function
    If Current_AllSteps = New_AllSteps Then
        Reporter.ReportEvent micDone, "This new execution 'Design Steps' matched existing steps. No changes made.", "This new execution 'Design Steps' matched existing steps. No changes made."
        Exit Function
    End If
    '==============================================
    
    
    '==============================================
    Dim objTestVCS, blnCheckIn
    Set objTestVCS = objTest.VCS
    If NOT objTestVCS.IsCheckedout Then    
        If FunCheckoutTest(objTest, "Load test description", False) Then
            blnCheckIn = True        
        End If
    End If 
    
    'If NOT currentTest.IsLocked Then
    If objTestVCS.IsCheckedout Then
        
        'Remove all current steps                                                                     
        For i = 1 To lstCurrentSteps.Count
            objStepFact.RemoveItem(lstCurrentSteps.Item(i).ID)    
        Next
    
        'Create array of new steps and add to QC
        Dim newStep
        newTestStepDesc = Split(Environment("strDesignStep"), vbCRLF) 
        For i = 0 to uBound(newTestStepDesc)          	
            If InStr(newTestStepDesc(i), "[" & strActionName & "]") > 0 Then                                        
                Set newStep = objStepFact.AddItem(Null)
                newStep.StepName = i + 1                                                          
                newStep.StepDescription = newTestStepDesc(i)                              
				'Add expected result
                If InStr(newTestStepDesc(i),"Expected") > 0 Then                
                	newStep.StepExpectedResult = Left(newTestStepDesc(i), InStr(newTestStepDesc(i), "Actual Value:") - 1)
                End If
                newStep.Post
            End If
        Next    
    
        'Write steps to report
        Reporter.ReportEvent 4, "Design Steps added for ACTION", New_AllSteps
        FunCheckinTest objTest, "Design Steps added by Automation for ACTION" & Now        
    Else
        Reporter.ReportEvent micDone, "Design Steps", "Test was checked out. Design Steps not added to ALM"
        'SubSendmail "jim.sears;" & currentTest.field("TS_RESPONSIBLE"), , Environment("TestName") & " - New Steps", "The ALM Test was checked out and the new steps were not updated.<p>The new steps are attached for informational purposes. The steps will attempt to update on the next run. If this email persists then please contact automation team for assistance.<p><b>Current steps: </b><br>" & vbCRLF & Current_StepList_for_email & "<p><b>New steps: </b><br>" & vbCRLF & aNewStepList_for_email ,,"HTML"
    End If
    
    Set objStepFact = Nothing
    Set lstCurrentSteps = Nothing
    Set objTest = Nothing
    Set objTestVCS = Nothing
End Function

'==================================================================================================
' Jim Sears - Ported over from Transplace (11/20/2012)
' User defined function to load Design Steps into ALM Test Plan for current running test
'--------------------------------------------------------------------------------------------------
Function SubLoadTestStepsToALMWithVersionControl()      
    'Exit if test is not run from ALM
    If FunALMConnected() Then
        If QCUtil.CurrentRun Is Nothing Then
            Exit Function
        End If
    Else
        Exit Function
    End If
	'==============================================
	
	
	'==============================================
    'Load steps only if test passed and executing user is qualitycenter and test is executed on the first of each month        
    If Reporter.RunStatus <> 0 AND Reporter.RunStatus <> 3 Then
        Select Case Reporter.RunStatus
            Case 1
                Reporter.ReportEvent micDone, "Design Steps", "Design Steps not updated becuase the test did not pass. Status: 'Fail'"
            Case 2
                Reporter.ReportEvent micDone, "Design Steps", "Design Steps not updated. Status: 'Done'. Please add checkpoints to verify test passed or failed."
            Case 3
                Reporter.ReportEvent micDone, "Design Steps", "Design Steps not updated. Status: 'Warning'. Test completed but encountered a warning. Please review test results."
        End Select   

		'Provide Steps in report for reference only - these steps are not added to Test Plan
	    Reporter.ReportEvent micDone, "Design Steps", Environment("strDesignStep") 
    
        Exit Function
    Else
        'Reporter.ReportEvent micDone, "Load Design Steps", "Test status: 'Pass'"
    End If    
    '==============================================
    
    
    '==============================================
    'Delete all links from LINK table where the link is to a test instance (Test Set Test) that is passing and the link was created by TAF automation
    Dim strSQL 
    strSQL = "DELETE FROM LINK WHERE LN_LINK_ID IN " & _
    "(SELECT LN_LINK_ID FROM LINK, TESTCYCL, BUG " & _
	"WHERE LN_BUG_ID = BG_BUG_ID " & _	
	"AND LN_ENTITY_ID = TC_TESTCYCL_ID " & _	
	"AND TC_STATUS = 'Passed' " & _	
	"AND BG_RESPONSIBLE = 'TAF' "
		
    Dim QC: Set QC = QCUtil.QCConnection
    Dim com: Set com = QC.Command
    com.CommandText = strSQL
    com.Execute
    Set QC = Nothing
    Set com = Nothing
	'==============================================
	
	
    '==============================================
    'Existing steps  
    Dim objStepFact, lstCurrentSteps, i, aStep, Current_StepList_for_email, Current_AllSteps     
    Set objStepFact = QCUtil.CurrentTest.DesignStepFactory
    Set lstCurrentSteps = objStepFact.NewList("")    
    For i = 1 To lstCurrentSteps.Count 'Create list of steps such as Set, Click for comparison to existing steps. Comparing data will always be different so we are just looking at steps.
        aStep = lstCurrentSteps.Item(i).StepDescription
        Current_StepList_for_email = Current_StepList_for_email & aStep & vbCRLF &  "<br>"
        If InStr(aStep, ":") > 0 AND aStep <> vbNullString Then
            aStep = Left(aStep, InStr(aStep, ":") - 1)
            Current_AllSteps = Current_AllSteps & aStep & vbCRLF
        Else
            Current_AllSteps = "Needs updating"
            Reporter.ReportEvent micDone, "Current ALM step count doesn't match test step count.", "Current ALM step count doesn't match test step count."
        End If
    Next
    '==============================================
    
    
    '==============================================
    'Create list of steps with only the Click, Set, Select, etc. for comparison and don't look at the data values passed. Otherwise tests would require updating more frequently because data values change (time, date, generated numbers).
    Dim newTestStepDesc, aNewStepList_for_email, New_aStep, New_AllSteps
    newTestStepDesc = Split(Environment("strDesignStep"), vbCRLF) 
    For i = 0 to uBound(newTestStepDesc)
        aNewStepList_for_email = aNewStepList_for_email & newTestStepDesc(i) & vbCRLF & "<br>"
        If newTestStepDesc(i) <> vbNullString Then                                        
			If InStr(newTestStepDesc(i),":") = 0 Then 'New Design step when ":" is missing
				Reporter.Report micFail, "Test step is missing crucial ':' symbol in test test. Test Steps can not be captured without the colon.", "Please see automation for assistance."
			Else
				New_aStep = Left(newTestStepDesc(i),InStr(newTestStepDesc(i),":") - 1) 'New Design step must have a ':' in the desc or an error will occur.
				New_AllSteps = New_AllSteps & New_aStep & vbCRLF
			End If
        End If
    Next    
    '==============================================
    
    
    '==============================================
    'Compare - if new and old steps are same then exit function
    If Current_AllSteps = New_AllSteps Then
        Reporter.ReportEvent micDone, "This new execution 'Design Steps' matched existing steps. No changes made.", "This new execution 'Design Steps' matched existing steps. No changes made."
        Exit Function
    End If
    '==============================================
    
    
    '==============================================
    'Notify test creator of new steps
    SubSendmail "jim.sears;" & QCutil.CurrentTest.Field("TS_RESPONSIBLE"), "qualitycenter", Environment("TestName") & " - New Steps", "This email contains the existing and new steps generated by the test run. Please review the steps and notify automation if you did NOT make any changes.<p>New design steps can be added if new objects are learned by automation. Only contact me if you are getting emails every day for same test AND you didn't make any changes. <p>Version changes take up storage space in QC so this email should only come when you change the steps to your test. <p>Thank you for your cooperation in this matter.<p><b>Current steps: </b><br>" & vbCRLF & Current_StepList_for_email & "<p><b>New steps: </b><br>" & vbCRLF & aNewStepList_for_email ,,"HTML"
    '==============================================
    
    
    '==============================================
    'UnLockTest() - Only load steps if test isn't locked            
    Dim objTest, objTestVCS, blnCheckIn
    Set objTest = QCUtil.CurrentTest
    Set objTestVCS = objTest.VCS
    If NOT objTestVCS.IsCheckedout Then    
        If FunCheckoutTest(objTest, "Load test description", False) Then
            blnCheckIn = True        
        End If
    End If 
    
    'If NOT currentTest.IsLocked Then
    If objTestVCS.IsCheckedout Then
        
        'Remove all current steps                                                                     
        For i = 1 To lstCurrentSteps.Count
            objStepFact.RemoveItem(lstCurrentSteps.Item(i).ID)    
        Next
    
        'Create array of new steps and add to QC
        Dim newStep
        newTestStepDesc = Split(Environment("strDesignStep"), vbCRLF) 
        For i = 0 to uBound(newTestStepDesc)  
            If newTestStepDesc(i) <> vbNullString Then                                        
                Set newStep = objStepFact.AddItem(Null)
                newStep.StepName = i + 1                                                          
                newStep.StepDescription = newTestStepDesc(i)                              
				'Add expected result
                If InStr(newTestStepDesc(i),"Expected") > 0 Then                
                	'newStep.StepExpectedResult = Mid(newTestStepDesc(i), InStr(newTestStepDesc(i),"Expected value"))
                	'[SFCEP_VAL_LST] Validation: Verify Contact exists. Actual Value:- [True] Expected value:- [True]
                	newStep.StepExpectedResult = Left(newTestStepDesc(i), InStr(newTestStepDesc(i), "Actual Value:") - 1)
                End If
                newStep.Post
            End If
        Next    
    
        'Write steps to report
        Reporter.ReportEvent 4, "Design Steps", Environment("strDesignStep")        
        FunCheckinTest objTest, "Design Steps added by Automation " & Now        
    Else
        Reporter.ReportEvent micDone, "Design Steps", "Test was checked out. Design Steps not added to ALM"
        SubSendmail "jim.sears;" & currentTest.field("TS_RESPONSIBLE"), , Environment("TestName") & " - New Steps", "The ALM Test was checked out and the new steps were not updated.<p>The new steps are attached for informational purposes. The steps will attempt to update on the next run. If this email persists then please contact automation team for assistance.<p><b>Current steps: </b><br>" & vbCRLF & Current_StepList_for_email & "<p><b>New steps: </b><br>" & vbCRLF & aNewStepList_for_email ,,"HTML"
    End If
    
    Set objStepFact = Nothing
    Set lstCurrentSteps = Nothing
    Set objTest = Nothing
    Set objTestVCS = Nothing
End Function

'==================================================================================================
'Jim Sears - 09/21/2016
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Send email notification to Test Set Test owner
Sub SubMaximizeBrowser(oBrowser)

	Dim hwnd, isMaximized, isMaximizable
			 
	'Find the handle for the Browser window
	hwnd = oBrowser.Object.HWND
	 
	'Check if the Browser is already maximized or not
	If Window("hwnd:=" & hwnd).GetROProperty("maximized") = True Then
	  isMaximized = True
	Else
	  isMaximized = False
	End If
	 
	'Check if the Browser is maximizable or not
	If Window("hwnd:=" & hwnd).GetROProperty("maximizable") = True Then
	  isMaximizable = True
	Else
	  isMaximizable = False
	End If
	 
	'Maximize the browser window if it is not already maximized and is maximizable
	If isMaximized = False and isMaximizable = True Then
	  Window("hwnd:=" & hwnd).Maximize
	End If	
	
End Sub
	
'==================================================================================================
'Jim Sears - 02/22/2008
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Send email notification to Test Set Test owner
Sub SubNotifyALMTestPlanner (strEmailSubject, strEmailMsg)
    'QC connection is required. Sub notifes Test Planner located in Test Set in QC. Different QC implementations may use different field names.
    'CVS uses a user defined field called 'TC_USER_TEMPLATE_02'.  
    If FunALMConnected Then
        'Exception handling in case Test Planner Name is empty.
        Dim strEmailSendTo: strEmailSendTo = QCUtil.CurrentTestSetTest.Field("TC_USER_TEMPLATE_02")
        If strEmailSendTo = vbNullString Then
                        strEmailSendTo = QCUtil.CurrentTestSetTest.Field("TC_ACTUAL_TESTER")
        End If
        SubSendMail strEmailSendTo, "TAF", strEmailSubject, strEmailMsg,,"HTML"
    Else
        Reporter.ReportEvent micFail, "SubRoutine: SubNotifyALMTestPlanner", "ALM is not connected. Unable to send email to notify Test Set Test Planner (Test Owner in Test Set) of the following message." & vbCRLF & vbCRLF & strEmailMsg
    End If    
End Sub                                

'USER REGISTERED FUNCTIONS
'==================================================================================================
' Jim Sears - 08/10/2011
'--------------------------------------------------------------------------------------------------
'@ User functions to handle no data provided for methods and to enhance method functionality
'@This allows UFT steps to be skipped when data is null.
Sub SubRegUserFunc(Enable)
    If Enable Then
        RegisterUserFunc "TeField", "Set", "SubSetWhenNotNull" 
        RegisterUserFunc "TeScreen", "SendKey", "SubSendKeyWhenNotNull" 
        RegisterUserFunc "WebEdit", "Set", "SubSetWhenNotNull"
        RegisterUserFunc "DojoFilterComboBox", "Set", "SubSetWhenNotNull"
        RegisterUserFunc "WebEdit", "SetSecure", "SubSetSecureWhenNotNull"
        RegisterUserFunc "WebCheckBox", "Set", "SubSetWhenNotNull"
        RegisterUserFunc "WebList", "Select", "SubSelectWhenNotNull"        
        RegisterUserFunc "WebElement", "Click", "SubClick"
        RegisterUserFunc "WebButton", "Click", "SubClick"
        RegisterUserFunc "Link", "Click", "SubClick"
        RegisterUserFunc "WebRadioGroup", "Select", "SubSelectWhenNotNull"
        RegisterUserFunc "WebElement", "CheckProperty", "SubCheckProperty"

		RegisterUserFunc "WebEdit", "Exist", "FunExist"
        RegisterUserFunc "WebCheckBox", "Exist", "FunExist"
        RegisterUserFunc "WebList", "Exist", "FunExist"        
        RegisterUserFunc "WebElement", "Exist", "FunExist"
        RegisterUserFunc "WebButton", "Exist", "FunExist"
        RegisterUserFunc "Link", "Exist", "FunExist"
        
        RegisterUserFunc "Browser", "Sync", "SubSync"
        RegisterUserFunc "Page", "Sync", "SubSync"
                        

        'RegisterUserFunc "MWebElement", "Set", "SubSetWhenNotNull"
        'RegisterUserFunc "Browser", "CloseAllTabs", "SubCloseAllTabs"


        RegisterUserFunc "Device", "Open", "SubOpen"		
        RegisterUserFunc "Device", "Home", "SubHome"
        RegisterUserFunc "Device", "Close", "SubClose"
    Else
        UnregisterUserFunc "TeField", "Set"
        UnregisterUserFunc "TeScreen", "SendKey"
        UnregisterUserFunc "WebEdit", "Set"
        UnregisterUserFunc "WebEdit", "SetSecure"
        UnregisterUserFunc "DojoFilterComboBox", "Set"        
        UnregisterUserFunc "WebEdit", "SetSecure"
        UnregisterUserFunc "WebCheckBox", "Set"
        UnregisterUserFunc "WebList", "Select"
        UnregisterUserFunc "WebElement", "Click"        
        UnregisterUserFunc "WebButton", "Click"
        UnregisterUserFunc "Link", "Click"
        UnregisterUserFunc "WebRadioGroup", "Select"
        UnregisterUserFunc "WebElement", "CheckProperty"
        
        UnregisterUserFunc "WebEdit", "Exist"
        UnregisterUserFunc "WebCheckBox", "Exist"
        UnregisterUserFunc "WebList", "Exist"
        UnregisterUserFunc "WebElement", "Exist"
        UnregisterUserFunc "WebButton", "Exist"
        UnregisterUserFunc "Link", "Exist"
        
        UnregisterUserFunc "Browser", "Sync"
        UnregisterUserFunc "Page", "Sync"
        

        UnregisterUserFunc "Device", "Open"
        UnregisterUserFunc "Device", "Home"
        UnregisterUserFunc "Device", "Close"
    End If
End Sub

'==================================================================================================
'Jim Sears - 08/08/2011
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Universal Report for all statements so report can write output to more than just the test results.
Sub SubReport(strStatus, strReportStepName, strDetails)
    Dim intReportFilter:intReportFilter = Reporter.Filter
    Dim strGetImage, strActionName    
    '==============================================
    
    
    '==============================================
    'Save steps to environment variable so they can be uploaded to ALM by another function
    If 	InStr(strDetails, "ACTION:") > 0 OR _ 
    	InStr(strDetails, "Set:") > 0 OR _
    	InStr(strDetails, "SetSecure:") > 0 OR _
    	InStr(strDetails, "Select:") > 0 OR _
    	InStr(strDetails, "Click:") > 0 OR _
       	InStr(strDetails, "Open:") > 0 OR _
       	InStr(strDetails, "CheckProperty:") > 0 OR _ 
       	InStr(strDetails, "CloseAllTabs:") > 0 OR _ 
       	InStr(strDetails, "Validation:") > 0 Then       		
       		'Prepend the ACTION name to the Step. Locally run ACTIONS will not have brackets
       		strActionName = FunGetActionName
       		       		
			'strReportStepName = strActionName & strReportStepName   		
		    strDetails = "[" & strActionName & "] " & strDetails
		    
        	Environment("strDesignStep") = Environment("strDesignStep") & strDetails & vbCrLf        
    End If
    'Capture all steps for comparison to see if more steps need to be added to DesignSteps    
    Environment("strAllSteps") = Environment("strAllSteps") & strDetails & vbCrLf
    '==============================================
    

    '==============================================
    'Restore report statements to normal so msg can be seen in test results
    Reporter.Filter = 0
    '==============================================


    '==============================================
    'Capture screenshot based on UFT Test Settings - Always option will capture all screenshots and will impact performance
    'If FunGetUFTCaptureLevel = "Always" Then 'Capture image if report filter is set to 0 - All                              
    '    Select Case strStatus
    '        Case "micPass"                 
    '            Reporter.ReportEvent micPass, strReportStepName, strDetails, FunCaptureDesktopImageForTestResults()
    '        Case "micFail"
    '            Reporter.ReportEvent micFail, strReportStepName, strDetails, FunCaptureDesktopImageForTestResults()
    '        Case "micDone"
    '            Reporter.ReportEvent micDone, strReportStepName, strDetails, FunCaptureDesktopImageForTestResults() 
    '        Case "micWarning"
    '            Reporter.ReportEvent micWarning, strReportStepName, strDetails, FunCaptureDesktopImageForTestResults()
    '        Case "micInfo"
    '            Reporter.ReportEvent micDone, strReportStepName, strDetails, FunCaptureDesktopImageForTestResults()
    '        Case Else
    '            Reporter.ReportEvent micFail, "SubReport", "Reporter.ReportEvent type '" & strStatus & "' is unknown. Please correct the code that calls the SubReport function and use a valid report type like 'micFail', 'micPass', 'micWarning'."
    '       End Select                                        
    'Else                        
        Select Case strStatus
            Case "micPass"                 
                Reporter.ReportEvent micPass, strReportStepName, strDetails, FunCaptureDesktopImageForTestResults()
            Case "micFail"
                Reporter.ReportEvent micFail, strReportStepName, strDetails, FunCaptureDesktopImageForTestResults()
            Case "micDone"
                Reporter.ReportEvent micDone, strReportStepName, strDetails
            Case "micWarning"
                Reporter.ReportEvent micWarning, strReportStepName, strDetails, FunCaptureDesktopImageForTestResults()
            Case "micInfo"
                Reporter.ReportEvent micDone, strReportStepName, strDetails
            Case Else
                Reporter.ReportEvent micFail, "SubReport", "Reporter.ReportEvent type '" & strStatus & "' is unknown. Please correct the code that calls the SubReport function and use a valid report type like 'micFail', 'micPass', 'micWarning'."
       End Select                                        
    'End If
    '==============================================


    '==============================================   
   'Restore report statement filter to setting prior to this function
    Reporter.Filter = intReportFilter
End Sub

'==================================================================================================
' Jim Sears - 09/26/2016
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Capture memory usage of any running browser
Function SubReportBrowserMemoryUsage()
    'Get browser memory at time of crash
    Dim oWMI, oSvc, oProcess, MemPreLoad, dblChromeMemory, dblIEMemory, dblFirefoxMemory
	Set oSvc = GetObject ("winmgmts:")
	Set oWMI = GetObject("winmgmts:\\.\root\cimv2") 	
	'--------------------
	
	
	'--------------------
	'Capture memory usage by browsers
	For Each oProcess In oSvc.InstancesOf ("Win32_Process")
		If oProcess.Name = "chrome.exe" Then		
			'Save the greatest memory instance of chrome because it is the browser memory in use
			If cdbl(oProcess.WorkingSetSize) > dblChromeMemory Then dblChromeMemory = cdbl(oProcess.WorkingSetSize) 
		End If
		If oProcess.Name = "IExplore.exe" Then		
			dblIEMemory  = dblIEMemory + cdbl(oProcess.WorkingSetSize)
		End If
		If oProcess.Name = "Firefox.exe" Then		
			dblFirefoxMemory = dblFirefoxMemory + cdbl(oProcess.WorkingSetSize)
		End If
	Next
	'--------------------
	
	
	'--------------------
	'Report memory usage when not zero and fail test if it exceed limit set by Salesforce team regarding chrome crashing
	If (dblChromeMemory / 1024) > 850000  Then				 									
		Reporter.ReportEvent micFail, "Chrome memory usage has exceeded fixed value 850 MB [" & FormatNumber(dblChromeMemory / 1024,"0") & " K]", "Chrome memory usage has exceeded fixed value of 850 MB [" & FormatNumber(dblChromeMemory / 1024,"0") & " K]"
	End If
	If dblChromeMemory > 0  Then				 									
		Reporter.ReportEvent micDone, "Chrome memory usage [" & FormatNumber(dblChromeMemory / 1024,"0") & " K]", "Chrome memory usage [" & FormatNumber(dblChromeMemory / 1024,"0") & " K]"
	End If
	If dblIEMemory > 0  Then				
		Reporter.ReportEvent micDone, "IE memory usage [" & FormatNumber(dblIEMemory / 1024,"0") & " K]", "IE memory usage [" & FormatNumber(dblIEMemory / 1024,"0") & " K]"
	End If
	If dblFirefoxMemory > 0  Then				
		Reporter.ReportEvent micDone, "Firefox memory usage [" & FormatNumber(dblFirefoxMemory / 1024,"0") & " K]", "Firefox memory usage [" & FormatNumber(dblFirefoxMemory / 1024,"0") & " K]"
	End If	
	'--------------------
	
	
	'--------------------
	Set oProcess = Nothing
	Set oWMI = Nothing 
	Set oSvc = Nothing
End Function	

'==================================================================================================
' Jim Sears - 4/25/2011
'--------------------------------------------------------------------------------------------------
'@Save each DATA_SCENARIO NOTES for each action because it describes what each action performs and together, it will describe what the test does.
Sub SubSaveTestDescription(strDataScenarioNotes)
   
   'SubUpdateLogFile "SubSaveTestDescription (Start)" & strDataScenarioNotes
   On Error Resume Next
        Environment("strDataScenarioNotes") = Environment("strDataScenarioNotes") & Replace(strDataScenarioNotes, vbCRLF, vbNullString) & vbCRLF
        If Err.Number <> 0 Then
            Environment("strDataScenarioNotes") = strDataScenarioNotes & vbCRLF
            Err.Clear
        End If
    On Error Goto 0
    'SubUpdateLogFile "SubSaveTestDescription (End)" & strDataScenarioNotes
End Sub

'==================================================================================================
' Jim Sears and Rodney Salyer
' 8/30/06
' User defined function to only perform the select method when the passed value is not equal to vbNullString.  Because
' his prevents the ablilty of the user to populate a field with a blank value or a space, functionality is provided that
' allows the use of special data.  This data is defined in the checkForSpecialData function.  In addition,
' this function prevents the processing of fields that are hidden by the use of the HTML Style "Display: None".
' Example usage to turn on:  RegisterUserFunc "weblist", "Select", "SelectWhenNotNull"
' Example usage to turn off:  UnRegisterUserFunc "weblist", "Select"
' Other objects besides "weblist" can be used, but the command "Select" must be valid for the object.
'--------------------------------------------------------------------------------------------------
'@Description Only selects a value when the datatable is not null and the object is not hidden. Override values are "<BLANK>" and "<SPACE>".
Public Sub SubSelectWhenNotNull(obj, strX)
    If Trim(strX) <> vbNullString Then
        Dim intReportFilter: intReportFilter = Reporter.Filter
        Reporter.Filter = 1
                
        'Exception handling to force test to stop when object not found
        If Not obj.Exist(20) Then            
            Reporter.Filter = 0
            Reporter.ReportEvent micFail, "SubSelectWhenNotNull - Object does not exist.", obj.ToString & " does not exist.", FunCaptureDesktopImageForTestResults
            'Exception handling to force test to stop when object not found        
            FunFailTest obj, "Select", strX, "Object does not exist"
            ExitTest
        End If  
        
       'If objHiddenByStyleDisplayNone(obj) Then
       '    reportHiddenObjectError obj, x
       'Else
       '    x = checkForSpecialData(x)
       
       
        'Sync problem for java
        'Get list and check for blank before attempting to select in an effort to wait for list to get populated
        
        'Dim intCnt, intIndx, intBuildCnt, strAllItems
        'On Error Resume Next
        '    Dim strClassName: strClassName = obj.Object.GetClass.ToString
        'On Error Goto 0
        
        'Build Java list 
        'If InStr(strClassName, "swing") > 0  AND NOT (isNumeric(Replace(x,"#",vbNullString))) Then
        '    'Loop to check for x in listbox
        '    Do
        '        'Build list                                                                                                              
        '        Wait 0,.1
        '        intCnt = Int(Obj.Object.GetModel.GetSize)
        '        For intIndx = 0 to intCnt - 1
        '            'All_Items = All_Items & obj.Object.getModel.getElementAt(indx).toString & vbCRLF
        '            strAllItems = strAllItems  & obj.GetItem(intIndx) & vbCRLF
        '       Next
        '       'Compare item exists in list 
        '           If InStr(strAllItems , x) > 0 Then
        '            Exit Do
        '        Else 'reset to rebuild list again
        '            Wait(1)                                                                                                                 
        '            intBuildCnt = intBuildCnt + 1                                                                                                                        
        '            If intBuildCnt = 60 Then                                                                                                                                 
        '                Reporter.ReportEvent micFail, "Item: " & x & " was not found in the list box of items.", "List items are:" & vbCRLF & strAllItems                                                                                         
        '                Exit Do
        '            End If
        '            strAllItems  = vbNullString
        '        End If
        '    Loop 
           'End If  

           'Build Web list                                                                    
        'If obj.GetRoProperty("micclass") = "WebList" Then
           '    intBuildCnt = 0
        '    Do                                                                                                          
        '        strAllItems = obj.GetRoProperty("all items") 'Get list of items for object
        '        'Reporter.ReportEvent micWarning, "strAllItems", strAllItems 'debug information
        '        'Compare item exists in list 
        '        If InStr(strAllItems & ";" , x & ";") > 0 Then 'Add the semi-colon to prevent partial matches of desired item in full list
        '            Exit Do
        '        Else 'reset to rebuild list again
        '            Wait 1  'Wait so not to pound the system
        '            intBuildCnt = intBuildCnt + 1   'Track attempts to get list
        '            ' Report failure to get items and exit loop                                                                                                                                             
        '            If intBuildCnt = 20 Then                                                                                                                                 
        '                Reporter.ReportEvent micFail, "Item: '" & x & "' was not found in the list of items.", "List items are:" & vbCRLF & strAllItems                                                                                          
        '                Exit Do
        '            End If
        '        End If 'Check if item is in list
        '    Loop  
        'End If   
    
        Reporter.Filter = intReportFilter
        obj.Select(strX)
        SubReport "micDone", "Select: [" & strX & "] from [" & obj.GetRoProperty("all items") & "] list for [" & obj.ToString & "].", "Select: [" & strX & "] from [" & obj.GetRoProperty("all items") & "] list for [" & obj.ToString & "]."            
              
    End If
End Sub

'==================================================================================================
'Jim Sears 08/23/2011
'Good for objects that don't use 'Type'
'---------------------------------------------------------------------------------------------
'Key       Code
'{             {{}
'}             {}}
'[             {[}
']             {]}
'~            {~}
'+            {+}
'^            {^}
'%           {%}
'BACKSPACE       {BACKSPACE}, {BS}, or {BKSP}
'BREAK {BREAK}
'CAPS LOCK         {CAPSLOCK}
'DEL or DELETE   {DELETE} or {DEL}
'DOWN ARROW                {DOWN}
'END      {END}
'ENTER {ENTER} or ~
'ESC        {ESC}
'HELP     {HELP}
'HOME {HOME}
'INS or INSERT   {INSERT} or {INS}
'LEFT ARROW     {LEFT}
'NUM LOCK        {NUMLOCK}
'PAGE DOWN     {PGDN}
'PAGE UP             {PGUP}
'PRINT SCREEN {PRTSC}
'RIGHT ARROW                 {RIGHT}
'SCROLL LOCK    {SCROLLLOCK}
'TAB       {TAB}
'Shift TAB +{TAB}
'UP ARROW        {UP}
'F1          {F1} --- F16          {F16}
'To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes:
'Key       Code
'+            SHIFT   ^               CTRL    %               ALT
'For example, the following strKeyString produces the CTRL-ALT-DELETE keystroke combination: "^%{DELETE}"
'The following VBScript code creates an instance of Notepad and types the words "Hello World!" ten times into Notepad.
'Code:
'Set WshShell = WScript.CreateObject("WScript.Shell")
'WshShell.Run "notepad", 9
'WScript.Sleep 500 ' Give Notepad some time to load
'For i = 1 To 10
'  WshShell.SendKeys "Hello World!"
'  WshShell.SendKeys "{ENTER}"
'Next     
'Select all ^a
'Copy ^c
'Past  ^v

'@Send key stroke to screen
Sub SubSendKey(aKey)
    Dim objShell: Set objShell = CreateObject("WScript.Shell")
    objShell.SendKeys aKey
    Set objShell = Nothing
End Sub

'==================================================================================================
'Jim Sears - 08/10/2011
'--------------------------------------------------------------------------------------------------
'@Set object when parameter is not null
Public Sub SubSendKeyWhenNotNull(obj, x)
    Dim intReportFilter:intReportFilter = Reporter.Filter    
    Reporter.Filter = 0
    
    If Trim(x) <> vbNullString Then     
        'Set edit value to x.
        obj.SendKey x
        
        SubReport "micDone", "Send key press: [" & FunGetPFKey(x) & "].", "Send key press: [" & FunGetPFKey(x) & "]."        
        'Sync with Emulator
        SubSyncOnPCOMReady                    
    End If
    Reporter.Filter = intReportFilter
End Sub

'==================================================================================================
'Jim Sears 08/23/2011
'--------------------------------------------------------------------------------------------------
'@Re-brand QC Send Mail to add time stamp and what action sent the email and other details.
'Example SubSendMail "x10234", "TAF", "Test Email", "My message of the day.", vbNullString, "HTML"
'Example SubSendMail "x10234", "TAF", "Test Email", "My message of the day.", vbNullString, "TEXT"  
Sub SubSendMail(SendTo, SendFrom, Subject, Message, attachArray, bsFormat)      
    '==============================================
    'Check for QC connection before attempting to send email. QC server is required to send email.
    If FunALMConnected() Then
        '==============================================


        '==============================================
        'Get Test Set Name
        On Error Resume Next
            Dim strTestSetName:strTestSetName = "NA - NOT executed from QC"
            strTestSetName = QCUtil.CurrentTestSet.Name                                               
        On Error Goto 0
        '==============================================


        '==============================================
        'Format message for HTML or NOT HTML(text)
        If bsFormat = "HTML" AND Len(Message) > 0 Then
            Message = Replace(Message, vbCRLF, "<br>") 'Enhance email by removing text line breaks(vbCRLF) and use HTML line breaks (<br>).
            Message = Message & "<br><br><br><br><br>" & "<font color=" & Chr(34) & "#051693" & Chr(34) & "><i>Email sent from</i>" & "<br><b>Host Name:</b> " & Environment("LocalHostName") & "<br><b>TestSet Name:</b> " & strTestSetName & "<br><b>Test Name:</b> " & Environment("TestName") & "<br><b>Action Name:</b> " & Environment("ActionName") & "<br><b>Time:</b> " & Now & "</font>"
        Else                                        
            Message = Message & vbCRLF & vbCRLF & vbCRLF & vbCRLF & vbCRLF & vbCRLF & "Email sent from" & vbCRLF & "Host Name: " & Environment("LocalHostName") & vbCRLF & "TestSet Name: " & strTestSetName & vbCRLF & "Test Name: " & Environment("TestName") & vbCRLF  & "Action Name: " & Environment("ActionName") & vbCRLF & "Time: " & Now                                                             
        End If
        '==============================================


        '==============================================
        'Send email 'SendTo must be the username value for logging into ALM in case AD domain credentials are not used. 
        'If Not attachArray Is Nothing Then
            QCUtil.QCConnection.SendMail SendTo, SendFrom, Subject, Message, , bsFormat        
        'Else
        '    QCUtil.QCConnection.SendMail SendTo, SendFrom, Subject, Message, attachArray, bsFormat        
        'End If        
    Else
        'Error Handling
        Reporter.ReportEvent micWarning, "SubSendMail","Email not sent because test is not connected to ALM."
    End If
End Sub

'==================================================================================================
'Jim Sears - 08/10/2011
'--------------------------------------------------------------------------------------------------
'@Set object when parameter is not null
Public Sub SubSetWhenNotNull(obj, strX)

	WaitForPageLoader(20)
	
    If Trim(strX) <> vbNullString Then 
        Dim intReportFilter:intReportFilter = Reporter.Filter
        'Filter setting 1 is error and warning. If script fails then report will have details.
        'If Screen capture on Error and Warnings is on in UFT Options then screenshot will be in results.
        Reporter.Filter = 1
        
        If Not obj.Exist(20) Then            
            Reporter.Filter = 0
            Reporter.ReportEvent micFail, "SubSetWhenNotNull - Object does not exist.", obj.ToString & " does not exist.", FunCaptureDesktopImageForTestResults
            'Exception handling to force test to stop when object not found        
            FunFailTest obj, "Set", obj.ToString , "Object does not exist"        
            ExitTest
        End If 
        
		'Un-register if running Perfecto
        If uCase(Left(Environment("ActionName"),1)) = "M" Then SubRegUserFunc False
                
		Reporter.Filter = intReportFilter                
        'Set edit value to strX    
        obj.Set strX        
		SubReport "micDone", "Set: [" & obj.ToString & "] to [" & strX & "].", "Set: [" & obj.ToString & "] to [" & strX & "]."        
		
		'Unregister if running Perfecto
		If uCase(Left(Environment("ActionName"),1)) = "M" Then SubRegUserFunc True        
    End If       
End Sub

'==================================================================================================
'Jim Sears - 08/10/2011
'--------------------------------------------------------------------------------------------------
'@Set object when parameter is not null
Public Sub SubSetSecureWhenNotNull(obj, strX)
    If Trim(strX) <> vbNullString Then 
        Dim intReportFilter:intReportFilter = Reporter.Filter
        'Filter setting 1 is error and warning. If script fails then report will have details.
        'If Screen capture on Error and Warnings is on in UFT Options then screenshot will be in results.
        intReportFilter = 1
        
        If Not obj.Exist(20) Then            
            Reporter.Filter = 0
            Reporter.ReportEvent micFail, "SubSetSecureWhenNotNull - Object does not exist.", obj.ToString & " does not exist.", FunCaptureDesktopImageForTestResults
            'Exception handling to force test to stop when object not found        
            FunFailTest obj, "Set", obj.ToString , "Object does not exist"        
            ExitTest
        End If 
        
        Reporter.Filter = intReportFilter
        'Set edit value to strX
        obj.SetSecure strX                         
        SubReport "micDone", "SetSecure: [" & obj.ToString & "] to [" & strX & "].", "SetSecure: [" & obj.ToString & "] to [" & strX & "]."        
    End If       
End Sub


'==================================================================================================
'Jim Sears - 11/15/2016
'--------------------------------------------------------------------------------------------------
'@Sync Browser or Page with less reporting
Public Sub SubSync(obj)

	WaitForPageLoader(20)
    
    Dim intReportFilter:intReportFilter = Reporter.Filter
    'Filter setting 1 is error and warning. If script fails then report will have details.
    'If Screen capture on Error and Warnings is on in UFT Options then screenshot will be in results.
    intReportFilter = 1        
    obj.Sync         
    Reporter.Filter = intReportFilter        
End Sub

'==================================================================================================
'Jim Sears - 08/14/2011
'----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
'@Initialize test processes or artifacts at a test level. Called from each QC Test.
Sub SubTestInitialize()
    
    SubRegUserFunc False
	'Reduce report statements to error and warnings only = 1 or show all = 0
	'Report.Filter Modes
    '0 or rfEnableAll: This is the default mode. All reported events are displayed in the Test Results. 
    '1 or rfEnableErrorsAndWarnings: Only those events with a warning or fail status are displayed in the Test Results. 
    '2 or rfEnableErrorsOnly: Only those events with a fail status are displayed in the Test Results. 
    '3 or rfDisableAll: All events in the Test Results are disabled. 
    Reporter.Filter = 0
    '==================================================		

    '==================================================    
    'QTP has been crashing lately and the popup dialog doesn't go away when QTP is closed. This cleans up the dialog.
    'Close every instance of the dialog window, max loop time is 13 seconds.
    'Dim dtStartTime:dtStartTime = Now
    'Do While Dialog("text:=QTPro.exe - Application Error.*").Exist(0) AND DateDiff("s", dtStartTime, Now) > 13 
    '    Dialog("text:=QTPro.exe - Application Error.*").WinButton("text:=OK").Click
    '    Wait(1)
    'Loop
    
    SubUpdateTestSetTestComments(vbNullString)
    Environment("ExecutionOverhead") = 0
    
    'Load data for each test flow
    SubLoadTestData Environment("TestName")
    
    'To do.....
End Sub

'==================================================================================================
' Jim Sears - 12/8/2009
'--------------------------------------------------------------------------------------------------
'@Update Comments column in the Test Lab test set with the error encountered during run time. Function is called from FunFailTest
'The Comments field is on the Test Set for each Test listed in the Test Set. It is a custom field added by QC admin. Depending on how the field is added, it could called anything.
'See code comments below for examples

'Query using the dashboard excel report to see the Test Instance fields so that the field name can be identified.
    ''SELECT *
    ''FROM TESTCYCL, ALL_LISTS
    ''WHERE TC_CYCLE_ID=AL_ITEM_ID
    ''AND TC_TEST_ID='39491'
    ''Last used field TC_USER_06
    ''Another company CVS(?) or Transplace(?) used field name TC_USER_TEMPLATE_04
Sub SubUpdateTestSetTestComments(strMsg)
    'SubUpdateLogFile "SubUpdateTestSetTestComments " & strMsg
    Dim strFieldName, oThisTest, strRunComments, strCurrentMsg, intStartBrkt, intEndBrkt      
    
    'Toyota 
    'TC_USER_01 - TFS Review (TFS Rejected)
    'TC_USER_02 - TFS Review Reason (Invalid Test)
    'TC_USER_03 - TFS Commments (TFS Commments)
    'TC_USER_06 - Test Commments
    strFieldName = "TC_USER_03"
    
    Dim strNewMsg
    strNewMsg = "{" & Replace(Replace(strMsg, vbCRLF, " "), "<br>", " ")  & "}"
    'If uCase(Environment("UserName")) = "srv_taf_tst" Then
    If FunIsLabPC Then    	
        If FunALMConnected Then     
            If Not QCUtil.CurrentTestSet Is Nothing Then 
                Set oThisTest = QCUtil.CurrentTestSetTest                          
                    If NOT oThisTest.IsLocked Then
                    	 'Clean up if only msg in Comments are the brackets or empty str
						If strNewMsg = vbNullString Or strNewMsg = "{}" Then
            				oThisTest.Field(strFieldName) = vbNullString
            			Else
            				oThisTest.Field(strFieldName) = FunGetActionName & strNewMsg
            			End If
    '                    strRunComments = oThisTest.Field(strFieldName)
    '                    'Find Error String if exists                                              
    '                    intStartBrkt = InStr(strRunComments, "{")
    '                    intEndBrkt = InStr(strRunComments, "}")
    '                    'Update current error with new Run_Time_Error
    '                    If intStartBrkt > 0 AND intEndBrkt > 0 Then
    '                        strCurrentMsg = Mid(strRunComments, intStartBrkt , intEndBrkt  - intStartBrkt + 1)
    '                        'SendMail "jsears", "ALM", "Run Comments", Msg,,"HTML"
    '                        oThisTest.Field(strFieldName) = Replace(strRunComments, strCurrentMsg , strMsg)
    '                    ElseIf strMsg <> vbNullString  Then 'Add new Msg to current Run_Comments
    '                        oThisTest.Field(strFieldName) = strMsg  & strRunComments
    '                    End If                        
                        oThisTest.Post
                        'Reporting
                   		'If strMsg <> vbNullString Then
						'	Reporter.ReportEvent 4, "Function: Update Run Comments", "QC Run Comments have been updated to: " & strMsg              
                       	'Else
                       	'	Reporter.ReportEvent 4, "Function: Update Run Comments", "QC Run Comments msg has been removed. " & strMsg
                   		'End If
                    End If 'Test locked ?
            End If ' Test is in a Test Set 
        End If 'Error if Test is not run in QC           
    End If 
    Set oThisTest = Nothing                                        
    'End If 'User is QualityCenter ?
End Sub

'==================================================================================================
' Jim Sears - 07/26/2015
'--------------------------------------------------------------------------------------------------
'@User Registered function for verify
Sub SubCheckProperty(obj, strProperty, strPropertyValue, intTimeout)
    If obj.Exist(20) Then
        If obj.CheckProperty (strProperty, strPropertyValue, intTimeout) Then
            '.WebElement("-Accounts").CheckProperty "visible", "True", 30000
            SubReport "micPass", "CheckProperty", "CheckProperty: [" & obj.ToString & "] property [" & strProperty & "] has value [" & strPropertyValue & "]."                        
        Else
            Reporter.ReportEvent micFail, "CheckProperty", "CheckProperty: [" & obj.ToString & "] property [" & strProperty & "] has value [" & strPropertyValue & "].", FunCaptureDesktopImageForTestResults        
            FunFailTest obj, "CheckProperty", obj.ToString, "Object does not exist"
            ExitTest        
        End If
    Else        
        Reporter.ReportEvent micFail, "CheckProperty", "CheckProperty could not be completed. " & obj.ToString & " does not exist.", FunCaptureDesktopImageForTestResults 
        FunFailTest obj, "CheckProperty", obj.ToString, "Object does not exist"
        ExitTest        
    End If
End Sub

'==================================================================================================
' Jim Sears - 3/2/2012
'--------------------------------------------------------------------------------------------------
Sub SubVerifyWebElement(strFieldName, strFieldProperty, strComparisonOperator, strExpectedValue )             
    'Validate Web Element using web source code name. Right click on a web page, select view source to see object code name
    Dim strText, oList, strActualValue
    Dim oPage: Set oPage = Browser("Index:=0").Page("Index:=0")
    '=======================================================
    'Create child object description
    Dim oChildObjects: Set oChildObjects = Description.Create()
    oChildObjects ("name").value = strFieldName
    'Get list of child objects 
    Set oList = oPage.ChildObjects(oChildObjects )
    'Error Handling
    If oList.Count <> 1 Then                                
        Reporter.ReportEvent micFail, "SubVerifyWebElement", "Unable to identify web element '" & strFieldName & "'. Verification has failed. Please review web page source for proper name", FunCaptureDesktopImageForTestResults
        Exit Sub
    End If
    '=======================================================


    '=======================================================
    'Get actual value - zero based array
    strActualValue = oList.Item(0).GetROProperty(strFieldProperty)
    'Report evaluation
    FunCompare "Verify '" & strFieldName & "'", strActualValue, strComparisonOperator, strExpectedValue
End Sub

'==================================================================================================
' Jim Sears - 08/24/2015
'--------------------------------------------------------------------------------------------------
'@Write text to log file based on current test run
'Used for debugging where UFT has been crashing unexpectedly.
Sub SubUpdateLogFile(strX)

    'Not currently used - Used for debugging when framework flow causes UFT to crash unexpectedly
    Exit Sub
    
    Dim objFSO, objFile, oRun
    Set objFSO=CreateObject("Scripting.FileSystemObject")
        
    Set objFile = objFSO.OpenTextFile("TAF_DEBUG.txt", 8, True)
    
    If strX <> vbNullString Then 
        objFile.WriteLine Now & "> " & strX 
    Else        
        objFile.WriteBlankLines(3) 
    End If    
    objFile.Close
    
    Set objFile = objFSO.GetFile("TAF_DEBUG.txt")
    objFSO.CopyFile "TAF_DEBUG.txt", "TAF_FINAL.txt", True
            
    Set objFile = Nothing
    Set objFSO = Nothing
End Sub

'********************************************************************
'Usage examples
'Select an available device
	
'Now set the Device("DUT") to the device id selected
'This requires a pre-existing Device object in the object repository, if you do not have one, create it with the Record button.
'Once the object Device("DUT") is in the OR then set the deviceId manually or use this function to get an available device
		'Device("DUT").SetTOProperty "device_id",myDeviceId
		'Device("DUT").Open

'*********************************************************************
'*********************************************************************           
Public Sub SubSetMobileDevice (strDeviceProperties)
	'Jim Sears (Toyota) 0924/2016
	'Direct url HTTP request to Perfecto's cloud for available device using device properties.
	'Usage: strDeviceProperties is data pair of property and value (os=Android)
	'		multiple parameter values must be separated with the ampersand (&) symbol.
	
	'Example: SubSetMobileDevice("os=Android&model=Galaxy S5")
	'The property list is available in Perfecto from UFT or Perfecto Cloud.
	'Open the 'Launch Mobile Device" grid and see the list of property names on row 1 and property values.
	'Use any property name & propery value as input parameter in the SubSetMobileDevice method call.	
	'----------------	
	
	
	'----------------	
	'Regular expressions to include or exclude multiple values for the same property name like 'model'
	'String iPhoneModels="^(iPhone-5.*|iPhone-6.*)$"
	'String iPhoneVersions="9.0|9.0.1|9.1"
	'String iPhoneExcludeDevice="^(?!ABC|DEF|JKL)(^.*)"
	
	'String iPadModels="^(iPad 4|iPad Air|iPad 3)$"
	'String iPadVersions="9.0|9.0.1|9.1|8.4|8.3"
	'String iPadExcludeDevice="^(?!MNO|PQR|STU)(^.*)"
	
	'String androidModels="^(?!Nexus 7|Fire Phone|Galaxy Tab 2-10.*)(^.*)"
	'String androidOSVersions="5.1.1|5.0.1|5.0"
	'String androidExcludeDevice="^(?!VWX|YZA|BCD)(^.*)"
	
	'^ applygroup filter
	'! exclude (not) 
	'| (pipe symbol) - or
	'.* (wild card, requires the . (dot) symbol	
	'----------------	
		
	
	'----------------	
	'Direct url access to debug available device list.
	'Copy the following URL into browser and modify directly to evaluate filters to identify available devices in Perfecto Cloud
	'https://toyota.perfectomobile.com/services/handsets?operation=list&user=srv_taf_tst@toyota.com&password=Auto6701&status=connected&availableTo=srv_taf_tst@toyota.com&model=^(iPhone-6.*|Phone-5.*)
	'----------------	
	'----------------	
	'3-Tiered approach to selecting which device properties to use when running a test.
	
	'Developer        - If test is executed locally with temp results and not from QC or with results stored in QC then use the device under test that is in the object repository; a hard coded device.
	'Tester (from QC) - If the test is run from QC then use the device properties attached to the test set if they exist
	'Default values   - If the device properties do not exist in QC Test Set then use the properties passed in by the function
	
	'Executed from QC if Test Set name is populated and not blank or use function's input parameter for device properties.
	Dim strTestSetName: strTestSetName = FunGetQCTestSetName
	If strTestSetName <> "default" AND strTestSetName <> "" Then
	
		'Gets Device properties defined in QC Test Set
		Dim strQCDeviceProperties: strQCDeviceProperties = FunGetParmFromQCTestSetDesc("MobileDeviceProperties")
		'Use QC Test Set device properties if populated or use input device properties passed into function
		If strQCDeviceProperties <> vbNullString Then
			strDeviceProperties = strQCDeviceProperties			
		End If
	Else
		Reporter.ReportEvent micDone, "Using local device loaded in UFT OR [" & Device("DUT").GetROProperty("model") & ":" & Device("DUT").GetROProperty("device_id") & "]", "Using local device loaded in UFT OR [" & Device("DUT").GetROProperty("model") & ":" & Device("DUT").GetROProperty("device_id") & "]"			
		Exit Sub
	End If
	
	Reporter.ReportEvent micDone, "Using device based on properties [" & strDeviceProperties & "]", "Using device based on properties [" & strDeviceProperties & "]"			
	'----------------		
	'----------------
	Dim myCloud: myCloud = "toyota"
	Dim user: user = "srv_taf_tst@toyota.com"
	Dim password: password = "Auto6701" 'Please be ware --- anyone caught using user id/password that is not thiers can be terminated with cause

	Dim httpApiReq, strURL, strResult, i
	Dim objXMLDoc, nodesId, nodesModel, nodesManufacturer 
	Set httpApiReq = CreateObject("Microsoft.XMLHTTP")
	'----------------
	
	
	'----------------
	'Create URL Request and send
	strURL = "https://" & myCloud & ".perfectomobile.com/services/handsets?operation=list&user=" & user & "&password=" & password & "&status=connected&inUse=False&" & strDeviceProperties & "&availableTo=" & user
	httpApiReq.Open "POST", strURL, False
	httpApiReq.Send()
	strResult = httpApiReq.ResponseText 
	'----------------


	'----------------
	'Get mobile device or report error handling
	If InStr(uCase(strResult),"ERROR") > 0 Then
		Reporter.ReportEvent micFail, "SubSetMobileDevice: Error using properties [" & strDeviceProperties & "]", "SubSetMobileDevice: Error [" & strResult & "]"
		
		'Clean up
		Set httpApiReq = Nothing
		Set objXMLDoc = Nothing
		Set nodesId = Nothing
		Set nodesModel = Nothing
		Set nodesManufacturer = Nothing		
		ExitTest
	Else
		'Evaluate response
		Set objXMLDoc = FunCreateXMLDOMFromString(strResult)
		Set nodesId = objXMLDoc.SelectNodes("/handsets/handset/deviceId/text()")
		Set nodesModel = objXMLDoc.SelectNodes("/handsets/handset/model/text()")
		Set nodesManufacturer= objXMLDoc.SelectNodes("/handsets/handset/manufacturer/text()")
		If Err.Number <> 0 Then
			Reporter.ReportEvent micFail, "Get Available Device", "Sub 'SubSetMobileDevice' has failed. Please contact automation for assistance." & vbCRLF & "Error [" & CStr(Err.Number) & ":" & Err.Description & ". Http API Request= " & strResult		
		 	Err.Clear
		ElseIf nodesId.Length > 0 Then
			Reporter.ReportEvent micPass, "Using available device [" & nodesId(0).NodeValue & "]", "Using available device [" & nodesId(0).NodeValue & "] with properties [" & strDeviceProperties & "]"		
			Device("DUT").SetTOProperty "device_id", nodesId(0).NodeValue
		Else
			Reporter.ReportEvent micFail, "Get Available Device", "No available devices based on the input parameter [" & strDeviceProperties & "]"		
			'Clean up
			Set httpApiReq = Nothing
			Set objXMLDoc = Nothing
			Set nodesId = Nothing
			Set nodesModel = Nothing
			Set nodesManufacturer = Nothing
			ExitTest
		End If
		'----------------
	
	
		'----------------
		'Clean up
		Set httpApiReq = Nothing
		Set objXMLDoc = Nothing
		Set nodesId = Nothing
		Set nodesModel = Nothing
		Set nodesManufacturer = Nothing
	End If
	
End Sub

Public Function FunCreateXMLDOMFromString(sXMLSource)
	'The function create xml file from string
	Dim boolRC, intRC,objXMLDoc, objXMLRoot
	If Trim(sXMLSource) = "" Then
		Set FunCreateXMLDOMFromString = Nothing
	 	Exit Function
	End If
	Set objXMLDoc = CreateObject("Microsoft.XMLDOM")
	objXMLDoc.async = False
	On Error Resume Next
		objXMLDoc.loadXML(sXMLSource)
		intRC = Err.Number
	On Error GoTo 0
	
	If boolRC Then
		Set objXMLDoc = Nothing
		Set FunCreateXMLDOMFromString = Nothing
		Exit Function
	End If 
	
	Set objXMLRoot = objXMLDoc.documentElement
	boolRC = isNull(objXMLRoot) or (objXMLRoot is Nothing) 
	If boolRC Then
		Set objXMLDoc = Nothing
		Set FunCreateXMLDOMFromString = Nothing
		Exit Function
	End If 
	
	Set FunCreateXMLDOMFromString = objXMLDoc
End Function

Sub SubOpen(obj)
	'Jim Sears (Toyota) 10/13/2016
	'Override method 'Open' when device opens in Perfecto Cloud to capture device info in Test Steps
	'Future - Use Open method to find available device in cloud or open specific device instead of using teh SubSetMobileDevice("os=Android") routine.
	'-------------------
	
	
	'-------------------
	'Dim intReportFilter: intReportFilter = Reporter.Filter
    'Reporter.Filter = 1
            
	SubReport "micDone", "Open: [" & obj.GetROProperty("device_id") & ":" & obj.GetROProperty("model") & "].", "Open: [" & obj.GetROProperty("device_id") & ":" & obj.GetROProperty("model") & "]."        
    
	'Unregister if running Perfecto
    UnregisterUserFunc "Device", "Open"        
	        
    'Open Device
    obj.Open

	'Unregister if running Perfecto
	RegisterUserFunc "Device", "Open", "SubOpen"        
	
	'Reporter.Filter = intReportFilter 
End Sub


Sub SubClose(obj)
	'Jim Sears (Toyota) 10/13/2016
	'Override method 'Close' when device closes in Perfecto Cloud to capture device info in Test Steps
	'Future - Use CLose method to close device.
	'-------------------
	
	
	'-------------------
	'Dim intReportFilter: intReportFilter = Reporter.Filter
    'Reporter.Filter = 1
    
	SubReport "micDone", "Close: [" & obj.GetROProperty("device_id") & ":" & obj.GetROProperty("model") & "].", "Close: [" & obj.GetROProperty("device_id") & ":" & obj.GetROProperty("model") & "]."        
    
	'Unregister if running Perfecto
    UnregisterUserFunc "Device", "Close"        
	        
    'Open Device
    obj.Close

	'Unregister if running Perfecto
	RegisterUserFunc "Device", "Close", "SubClose"        
	
	'Reporter.Filter = intReportFilter 
End Sub


Sub SubHome(obj)
	'Jim Sears (Toyota) 10/13/2016
	'Override method 'Close' when device opens in Perfecto Cloud to capture device info in Test Steps
	'Future - Use Close method to find available device in cloud or open specific device instead of using teh SubSetMobileDevice("os=Android") routine.
	'-------------------
	
	
	'-------------------
	'Dim intReportFilter: intReportFilter = Reporter.Filter
    'Reporter.Filter = 1
    
	SubReport "micDone", "Home: [" & obj.GetROProperty("device_id") & ":" & obj.GetROProperty("model") & "].", "Home: [" & obj.GetROProperty("device_id") & ":" & obj.GetROProperty("model") & "]."        
    
	'Unregister if running Perfecto
    UnregisterUserFunc "Device", "Home"
	            
    'Close Device
    obj.Home

	'Unregister if running Perfecto
	RegisterUserFunc "Device", "Home", "SubHome"
	
	'Reporter.Filter = intReportFilter 
End Sub

'==================================================================================================
' Jim Sears - 11/09/2016
'--------------------------------------------------------------------------------------------------
'@Retrieve folder path as an object called 'SubjectNode'
Public Function qcGetTestPlanFolderFromPath(strTestPlanPath) 
    ' This function returns the Test SubjectNode object
    ' corresponding to the lowest level of a path.
    ' The path format is:
    ' "OTA_DEMO_SUBJECT\OTA_SUBJECT_level1\OTA_SUB_1.1\OTA_SUB_1.1.1\OTA_SUB_1.1.1.1"
    ' If a backslash is not used as the folder delimiter, any other
    ' character can be passed in the delimChar arguement.
    Dim QC: Set QC = QCUtil.QCConnection
    Dim delimChar: delimChar = "\"
    '---------------------------------
    
    
    '---------------------------------
    Dim treeMgr 'As TreeManager
    Dim subjRoot 'As SubjectNode
    Dim subNode 'As SubjectNode
    Dim trees 'As List
    Dim currentSubName 'As String
    'On Error GoTo GetSubjectNodeByPathErr
    '---------------------------------
    
    
    '---------------------------------
    'Get the list of subject root nodes from the tree manager.
    'There is only one item in this list.
    'QC is the global TDConnection object.
    currentSubName = "Set TreeMgr = QC.TreeManager"
    Set treeMgr = QC.TreeManager
    '---------------------------------
    
    
    '---------------------------------
    ' Use TreeManager.RootList to get the Subject root.
    Set trees = treeMgr.RootList '(TDOLE_SUBJECT)
    ' Get the name of the subject tree root in your project.
    'If qcGetHPServerType(QC.ServerURL) = "QC" Then currentSubName = trees.Item(2)    
    'If qcGetHPServerType(QC.ServerURL) = "ALM" Then currentSubName = trees.Item(1)
    currentSubName = trees.Item(1)
    '---------------------------------
    
    
    '---------------------------------
    ' Use TreeManager.TreeRoot to get the root node object
    ' from the tree manager by name.
    Set subjRoot = treeMgr.TreeRoot(currentSubName)
    If currentSubName <> "Subject" Then subjRoot.Refresh
    ' If strTestPlanPath is empty string, return the root.
    If Len(strTestPlanPath) = 0 Then
        Set qcGetTestPlanFolderFromPath = subjRoot
        Exit Function
    End If
    ' Trim the strTestPlanPath and strip leading and trailing delimiters.
    strTestPlanPath = Trim(strTestPlanPath)
    Dim pos, ln

    pos = InStr(1, strTestPlanPath, delimChar)
    If pos = 1 Then
        strTestPlanPath = Mid(strTestPlanPath, 2)
    End If
    pos = InStr(strTestPlanPath, currentSubName)
    If pos = 1 Then
        strTestPlanPath = Mid(strTestPlanPath, Len(currentSubName) + 2)
    End If

    ln = Len(strTestPlanPath)
    pos = InStr(ln - 1, strTestPlanPath, delimChar)
    If pos > 0 Then
        strTestPlanPath = Mid(strTestPlanPath, 1, ln - 1)
    End If
    '---------------------------------
    
    
    '---------------------------------
    'Set up to walk the tree.
    Set subNode = subjRoot
    'Split the path into individual node names.
    Dim subjectArray 'As String
    subjectArray = Split(strTestPlanPath, delimChar)
    'If path is not directly under root then walk down path.
    If LBound(subjectArray) < UBound(subjectArray) Then
        Dim idx
        'Debug.Print LBound(subjectArray), UBound(subjectArray)
        'Start at array index 1 and don't try to get node for [ALM] Subject
        For idx = LBound(subjectArray) + 1 To UBound(subjectArray) - 2
            currentSubName = subjectArray(idx)
            'Debug.Print subjRoot.Name & delimChar & currentSubName
            'Use SubjectNode.FindChildNode to get a specifed node.
            Set subNode = subjRoot.FindChildNode(currentSubName)
            Set subjRoot = subNode 'for next loop
        Next 
    End If 'lbound < ubound
    'Get the last node.
    currentSubName = subjectArray(UBound(subjectArray)-1)
    'Debug.Print SubjRoot.Name & delimChar & CurrentSubName
    Set subNode = subjRoot.FindChildNode(currentSubName)
    'Debug.Print subNode.Name
    '---------------------------------
        
    Select Case Err.Number
        Case 0
            'Return the last node.
            Set qcGetTestPlanFolderFromPath = subNode                
        Case -2147418113
            'Add missing folder
            If MsgBox("The TestSet folder [" & currentSubName & "] does not exist in [" & subNode & "]." & vbCrLf & "Would you like to add it?", vbYesNo, "GET TEST PLAN FOLDER") = vbYes Then
                subjRoot.AddNode currentSubName
                Err.Clear
                Set qcGetTestPlanFolderFromPath = qcGetTestPlanFolderFromPath(QC, strTestPlanPath)
            Else 'Abort process
                MsgBox "The macro will now end.", vbInformation, "GET TEST PLAN FOLDER"
                appReset "quiet"
                Set treeMgr = Nothing
                Set subjRoot = Nothing
                Set subNode = Nothing
                Set trees = Nothing
                Exit Function
            End If
        Case Else
            MsgBox Err.Number & ":" & Err.Description & vbCrLf & vbCrLf & "Please try restarting Excel or closing QualityCenter and as a last resort, reboot your PC.", vbInformation, "GET TEST PLAN FOLDER"
            appReset
            Set treeMgr = Nothing
            Set subjRoot = Nothing
            Set subNode = Nothing
            Set trees = Nothing
            Exit Function
    End Select
    
    Set treeMgr = Nothing
    Set subjRoot = Nothing
    Set subNode = Nothing
    Set trees = Nothing
End Function


'==================================================================================================
' Jim Sears - 11/09/2016
'--------------------------------------------------------------------------------------------------
'@Retrieve QC test as an object
Public Function qcFindTestInFolder(containingFolder, strTestName)
    'Jim Sears
    '(Toyota) 04/01/2016 - Added folder search (containingFolder)
    '(Capco) 11/18/2013
    'Find a test in a QC folder - from OTA Guide    
    '------------------------------
    
    
    '------------------------------
    Dim tFact 'As TestFactory
    Dim tFilter 'As TDFilter
    Dim testList 'As List
    Set qcFindTestInFolder = Nothing
    '------------------------------
    
    
    '------------------------------
    Set tFact = containingFolder.TestFactory
    Set tFilter = tFact.Filter
    '------------------------------
    
    
    '------------------------------
    'Wrap test name quotes in case name has spaces and filter Test Factory for the specific test
    Dim strWrappedTestName: strWrappedTestName = """" & strTestName & """"
    tFilter.Filter("TS_NAME") = strWrappedTestName
    '------------------------------
        
    
    '------------------------------
    'Create list of tests matching test name
    Set testList = tFact.NewList(tFilter.Text)
    'Debug.Print testList.Count
    'Return test or nothing
    If testList.Count = 0 Then
        Set qcFindTestInFolder = Nothing
    ElseIf testList.Count = 1 Then
        Set qcFindTestInFolder = testList.Item(1)
    End If
    '------------------------------
    
    
    '------------------------------
    Select Case Err.Number
        Case 0
            'Do Nothing
        Case -99
            'Test Does not exist
            Set qcFindTestInFolder = Nothing
        Case Else
            MsgBox "Unhandled error" & "[" & Err.Number & "]" & Err.Description, vbCritical, "Function:qcFindTestInFolder"            
            Exit Function
    End Select
    '------------------------------
    
    'Clean Up
    Set tFact = Nothing
    Set tFilter = Nothing
End Function

'==================================================================================================
' Jim Sears - 08/11/2011
'--------------------------------------------------------------------------------------------------
'@Update a single field to a record in the TAF database using a SQL query to retrieve and update the record.
Public Sub SubUpdateTAF(strSQL, strFieldName, strFieldValue)    
    Dim objConnection, objRecordSet, intElapsedTime
    Reporter.ReportEvent micDone, "SubUpdateTAF", strSQL & " " & strFieldName & " " & strFieldValue
    '==================================================
    
    
    '==================================================          
    'Performance monitor Start 
    MercuryTimers("UPDATE_DATA").Start 
    '==================================================


    '================================================== 
    'Connect to DATA SOURCE and populate DATA TABLE
    Const adCursorType = 3  'http://www.w3schools.com/ADO/met_rs_open.asp#CursorTypeEnum
    Const adLockType = 3  'http://www.w3schools.com/ADO/met_rs_open.asp#LockTypeEnum
    Const adCmdType = &H0001
    Set objConnection = Nothing
    Set objRecordSet = Nothing
    Set objConnection = CreateObject("ADODB.Connection")
    Set objRecordSet = CreateObject("ADODB.Recordset")
    '==================================================
    
    Dim DBschema
	
	If instr(lcase(strSQL),"td_")>0 Then
		DBschema="td"
		Else DBschema="ld" 
	End If


    '==================================================
    'MySQL connection    
    Dim strCnxn, strDbHost    
    strCnxn = "Provider=MSDASQL; Driver={MySQL ODBC 5.3 ANSI Driver};Server=td9723826.tfs.toyota.com;Port=3306;Database=" & DBschema & ";User=ReadOnly;PWD=Auto6701;Option=3;"
    Reporter.ReportEvent micDone, "CNXN", strCnxn
    If objConnection is nothing then 
        objConnection.Open (strCnxn)
        Reporter.ReportEvent micDone, "CNXN State", objConnection.State        
    End If
    If objConnection.State = 0  Then 
        objConnection.Open (strCnxn)    
        Reporter.ReportEvent micDone, "CNXN State", objConnection.State        
    End If 

    '==================================================                                                          
    
'strSQL="SELECT * FROM td_conversion_data WHERE DATA_AVAILABILITY = 'y'"


    '==================================================                                                          
    'MySql query - Execute query and populate result set       
	objRecordset.Open strSQL, objConnection, adCursorType, adLockType, adCmdType
	Reporter.ReportEvent micDone, "Record Set Count", objRecordset.RecordCount
    '==================================================

  
    '==================================================   
    'Error handling for empty record set (no data returned from SQL query)
    If objRecordset.BOF AND objRecordset.EOF Then
        Reporter.ReportEvent micFail, "Data not found for [" & strSQL & "]",  "No data rows found for SQL [" & strSQL & "]." & vbCRLF & vbCRLF & "Please review data scenario name for typos."                         
        ExitTestIteration
    End If
    '==================================================


    '==================================================
    'Update a single field in the RecordSet that the SQL query returned.    
	'I.E. LAST_RUN
    objRecordset(strFieldName) = strFieldValue
    On Error Resume Next
        objRecordSet.Update
        If Err.Number <> 0 Then
            objRecordSet.CancelUpdate
            Reporter.ReportEvent micWarning, "Function SubUpdateTAF", "Failed to update [" & strFieldName & "] field with SQL [" & strSQL & "]. Please contact Automation Support for assistance." & vbCRLF & vbCRLF & "Error: " & Err.Description
        End If
    On Error Goto 0
    '==================================================


    '==================================================
    'Garbage Clean Up On Error
    If Err.Number <> 0 Then
        'Clean up
        objRecordset.Close
        Set objRecordSet = Nothing
        objConnection.Close
        Set objConnection = Nothing        
        Exit Sub 'TestExit command will not work and will hang the script with 'error in function file'.
    End If
    '==================================================
    
    
    '==================================================
    'Performance monitor End
    MercuryTimers("UPDATE_DATA").Stop 
    intElapsedTime = MercuryTimers("UPDATE_DATA").ElapsedTime / 1000    
    Environment("ExecutionOverhead") = Environment("ExecutionOverhead") + intElapsedTime    
    Reporter.ReportEvent 4, "Update Data", strFieldName & "(" & strFieldValue & ") " & intElapsedTime & " seconds."  & vbCRLF &_
    "                Execution Overhead is the time to load data and call Actions for this test: " & Environment("ExecutionOverhead") & " seconds."       
    '==================================================


    '==================================================
    'Clean up
    objRecordset.Close
    Set objRecordSet = Nothing
    objConnection.Close
    Set objConnection = Nothing
    '==================================================

End Sub

'==================================================================================================
' Mohamed Ibrahim - 08/18/2017
'--------------------------------------------------------------------------------------------------
'@Get row of record from TAF database using a SQL query
Public Function SubGetRowFromTAF(strSQL)    
    Dim objConnection, objRecordSet, intElapsedTime
    Reporter.ReportEvent micDone, "SubGetRowFromTAF", strSQL
    '==================================================
    
    
    '==================================================          
    'Performance monitor Start 
    MercuryTimers("UPDATE_DATA").Start 
    '==================================================


    '================================================== 
    'Connect to DATA SOURCE and populate DATA TABLE
    Const adCursorType = 3  'http://www.w3schools.com/ADO/met_rs_open.asp#CursorTypeEnum
    Const adLockType = 3  'http://www.w3schools.com/ADO/met_rs_open.asp#LockTypeEnum
    Const adCmdType = &H0001
    Set objConnection = Nothing
    Set objRecordSet = Nothing
    Set objConnection = CreateObject("ADODB.Connection")
    Set objRecordSet = CreateObject("ADODB.Recordset")
    '==================================================

	Dim DBschema
	
	If instr(lcase(strSQL),"td_")>0 Then
		DBschema="td"
		Else DBschema="ld" 
	End If

    '==================================================
    'MySQL connection    
    Dim strCnxn, strDbHost    
    strCnxn = "Provider=MSDASQL; Driver={MySQL ODBC 5.3 ANSI Driver};Server=td9723826.tfs.toyota.com;Port=3306;Database=" & DBschema & ";User=ReadOnly;PWD=Auto6701;Option=3;"
    Reporter.ReportEvent micDone, "CNXN", strCnxn
    If objConnection is nothing then 
        objConnection.Open (strCnxn)
        Reporter.ReportEvent micDone, "CNXN State", objConnection.State        
    End If
    If objConnection.State = 0  Then 
        objConnection.Open (strCnxn)    
        Reporter.ReportEvent micDone, "CNXN State", objConnection.State        
    End If 

    '==================================================                                                          

    'MySql query - Execute query and populate result set       
	objRecordset.Open strSQL, objConnection, adCursorType, adLockType, adCmdType
	Reporter.ReportEvent micDone, "Record Set Count", objRecordset.RecordCount
    '==================================================

    Dim RowData
    Set RowData = CreateObject("Scripting.Dictionary")
    Dim i
    
    If Not objRecordset.EOF Then
	    For i =0 To objRecordset.Fields.Count-1 Step 1
	    	RowData.Add objRecordset.Fields(i).Name,objRecordset.Fields(i).Value
	    Next    	
    End If
    
	Set SubGetRowFromTAF=RowData

    '==================================================
    'Clean up
    objRecordset.Close
    Set objRecordSet = Nothing
    objConnection.Close
    Set objConnection = Nothing
    '==================================================

End Function

Sub SubAssociateFunctionLibrary(strPath)
	Dim qtApp,qtLibraries
	Set qtApp = CreateObject("QuickTest.Application") ' Create the Application object
	Set qtLibraries = qtApp.Test.Settings.Resources.Libraries ' Get the libraries collection object

	' Add Utilities.vbs if it's not in the collection
	If qtLibraries.Find(strPath) = -1 Then ' If the library cannot be found in the collection
		LoadFunctionLibrary strPath ' Add the library to the collection
	End If

	qtApp.Test.Save ' Save the test

	Set qtLibraries = Nothing
	Set qtApp = Nothing

End Sub

Function fnRandomNumber(LengthOfRandomNumber)
	
	Dim sMaxVal : sMaxVal = ""
	Dim iLength : iLength = LengthOfRandomNumber
	
	'Find the maximum value for the given number of digits
	For iL = 1 to iLength
	sMaxVal = sMaxVal & "9"
	Next
	sMaxVal = Int(sMaxVal)
	
	'Find Random Value
	Randomize
	iTmp = Int((sMaxVal * Rnd) + 1)
	'Add Trailing Zeros if required
	iLen = Len(iTmp)
	fnRandomNumber = iTmp * (10 ^(iLength - iLen))

End Function

Function WaitForPageLoader(WaitSec)

	Dim dtStartTime: dtStartTime = Now    
	'Reporter.Filter = 1
	Do
		If Not Browser("Index:=0").Page("Index:=0").WebElement("html id:=loader_wrapper","visible:=True").Exist(0) Then
			Exit Do
			Else 
				SubReport "micInfo", "..........Page Loader Present", "Page Loader Present"
				wait 2  
		End If
	Loop While DateDiff("s", dtStartTime, Now) < WaitSec 
	Reporter.Filter = 0
	
	
End Function